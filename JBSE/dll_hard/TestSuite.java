package dll_hard;

import static java.lang.System.identityHashCode;
import static org.junit.Assert.*;

import java.lang.reflect.Array;
import java.lang.reflect.Field;
import java.util.HashSet;
import sun.misc.Unsafe;

import org.junit.Test;

public class TestSuite {
    private static class AccessibleObject {
        private final Object target;
        AccessibleObject(Object o) {
            target = o;
        }
        void set(String fieldName, Object value) {
            try {
                final Field p = target.getClass().getDeclaredField(fieldName);
                p.setAccessible(true);
                p.set(target, value);
            } catch (IllegalArgumentException | IllegalAccessException
                | NoSuchFieldException | SecurityException e) {
                throw new RuntimeException(e);
            }
        }
        AccessibleObject get(String fieldName) {
            try {
                final Field p = target.getClass().getDeclaredField(fieldName);
                p.setAccessible(true);
                return new AccessibleObject(p.get(target));
            } catch (IllegalArgumentException | IllegalAccessException
                | NoSuchFieldException | SecurityException e) {
                throw new RuntimeException(e);
            }
        }
        Object getValue() {
            return target;
        }
    }

    private static final Unsafe UNSAFE; //ugly!

    static {
        final Field uns;
        try {
            uns = Unsafe.class.getDeclaredField("theUnsafe");
            uns.setAccessible(true);
            UNSAFE = (Unsafe) uns.get(null);
        } catch (NoSuchFieldException e) {
            throw new RuntimeException(e);
        } catch (IllegalAccessException e) {
            throw new RuntimeException(e);
        }
    }

    private static Object newInstance(String type) {
        try {
            final Class<?> clazz = Class.forName(type);
            return clazz.cast(UNSAFE.allocateInstance(clazz));
        } catch (ClassNotFoundException e) {
            throw new RuntimeException(e);
        } catch (InstantiationException e) {
            throw new RuntimeException(e);
        }
    }

    private static Object newArray(String memberType, int length) {
        try {
            final Class<?> clazz = Class.forName(memberType);
            return Array.newInstance(clazz, length);
        } catch (ClassNotFoundException e) {
            throw new RuntimeException(e);
        }
    }

    public class ObjectField {
        private final Object obj;
        private final Field fld;
        public ObjectField(Object obj, String fldName) {
            this.obj = obj;
            try {
                this.fld = obj.getClass().getDeclaredField(fldName);
            } catch (NoSuchFieldException | SecurityException e) {
                throw new RuntimeException(e);
            }
        }
        @Override
        public int hashCode() {
            final int prime = 31;
            int result = 1;
            result = prime * result + ((fld == null) ? 0 : fld.hashCode());
            result = prime * result + ((obj == null) ? 0 : identityHashCode(obj));
            return result;
        }
        @Override
        public boolean equals(Object obj) {
            if (this == obj) {
                return true;
            }
            if (obj == null) {
                return false;
            }
            if (getClass() != obj.getClass()) {
                return false;
            }
            final ObjectField other = (ObjectField) obj;
            if (this.fld == null) {
                if (other.fld != null) {
                    return false;
                }
            } else if (!fld.equals(other.fld)) {
                return false;
            }
            if (this.obj == null) {
                if (other.obj != null) {
                    return false;
                }
            } else if (this.obj != other.obj) {
                return false;
            }
            return true;
        }
    }

    public HashSet<ObjectField> nullObjectFields;

//.1//.1//.1 {ROOT}:o not expanded. It may be a hint of too strong user-defined constraints, possibly correct when enforcing redundancy by representation invariant.
    @Test(expected=java.lang.IndexOutOfBoundsException.class)
    public void test0() {
        //test case for state //.1//.1//.1//.1//.1//.1[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 0);  // 4 >= {V3} + 1
        ; // pre_init(java/lang/IndexOutOfBoundsException)
        ; // pre_init(java/lang/RuntimeException)
        ; // pre_init(java/lang/Exception)
        ; // pre_init(java/lang/Throwable)
        ; // !pre_init(java/lang/String)
        ; // !pre_init(java/lang/String$CaseInsensitiveComparator)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1//.1 trace is safe.
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1 {ROOT}:dll.header.next.next.next.next.next.element not expanded. It may be a hint of too strong user-defined constraints, possibly correct when enforcing redundancy by representation invariant.
    @Test
    public void test1() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1//.1//.1[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R30} == Object[10] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R29} == Object[11] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1//.1//.1 trace is safe.
    @Test
    public void test2() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1//.1.2[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R30} == Object[10] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R29} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1//.1.2 trace is safe.
    @Test
    public void test3() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1//.1.3[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R30} == Object[10] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R29} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1//.1.3 trace is safe.
    @Test
    public void test4() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1//.1.4[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R30} == Object[10] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R29} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1//.1.4 trace is safe.
    @Test
    public void test5() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1//.1.5[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R30} == Object[10] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R29} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1//.1.5 trace is safe.
    @Test
    public void test6() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1//.1.6[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R30} == Object[10] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R29} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1//.1.6 trace is safe.
    @Test
    public void test7() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1//.1.7[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R30} == Object[10] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1//.1.7 trace is safe.
    @Test
    public void test8() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1//.1.8[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R30} == Object[10] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1//.1.8 trace is safe.
    @Test
    public void test9() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1//.1.9[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R30} == Object[10] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").get("previous").getValue()); // {R29} == Object[10] (aliases {ROOT}:dll.header.next.next.next.next.next.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1//.1.9 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test10() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1//.1//.10[6]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R30} == Object[10] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "next")); // {R29} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1//.1//.10 trace is safe.
    @Test
    public void test11() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.2//.1[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R30} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R29} == Object[10] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.2//.1 trace is safe.
    @Test
    public void test12() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.2.2[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R30} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R29} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.2.2 trace is safe.
    @Test
    public void test13() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.2.3[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R30} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R29} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.2.3 trace is safe.
    @Test
    public void test14() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.2.4[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R30} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R29} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.2.4 trace is safe.
    @Test
    public void test15() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.2.5[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R30} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R29} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.2.5 trace is safe.
    @Test
    public void test16() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.2.6[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R30} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R29} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.2.6 trace is safe.
    @Test
    public void test17() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.2.7[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R30} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.2.7 trace is safe.
    @Test
    public void test18() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.2.8[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R30} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.2.8 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test19() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.2.9[6]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R30} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "next")); // {R29} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.2.9 trace is safe.
    @Test
    public void test20() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.3//.1[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R30} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R29} == Object[10] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.3//.1 trace is safe.
    @Test
    public void test21() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.3.2[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R30} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R29} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.3.2 trace is safe.
    @Test
    public void test22() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.3.3[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R30} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R29} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.3.3 trace is safe.
    @Test
    public void test23() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.3.4[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R30} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R29} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.3.4 trace is safe.
    @Test
    public void test24() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.3.5[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R30} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R29} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.3.5 trace is safe.
    @Test
    public void test25() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.3.6[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R30} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R29} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.3.6 trace is safe.
    @Test
    public void test26() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.3.7[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R30} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.3.7 trace is safe.
    @Test
    public void test27() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.3.8[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R30} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.3.8 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test28() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.3.9[6]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R30} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "next")); // {R29} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.3.9 trace is safe.
    @Test
    public void test29() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.4//.1[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R30} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R29} == Object[10] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.4//.1 trace is safe.
    @Test
    public void test30() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.4.2[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R30} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R29} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.4.2 trace is safe.
    @Test
    public void test31() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.4.3[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R30} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R29} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.4.3 trace is safe.
    @Test
    public void test32() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.4.4[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R30} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R29} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.4.4 trace is safe.
    @Test
    public void test33() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.4.5[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R30} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R29} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.4.5 trace is safe.
    @Test
    public void test34() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.4.6[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R30} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R29} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.4.6 trace is safe.
    @Test
    public void test35() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.4.7[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R30} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.4.7 trace is safe.
    @Test
    public void test36() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.4.8[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R30} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.4.8 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test37() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.4.9[6]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R30} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "next")); // {R29} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.4.9 trace is safe.
    @Test
    public void test38() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.5//.1[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R30} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R29} == Object[10] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.5//.1 trace is safe.
    @Test
    public void test39() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.5.2[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R30} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R29} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.5.2 trace is safe.
    @Test
    public void test40() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.5.3[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R30} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R29} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.5.3 trace is safe.
    @Test
    public void test41() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.5.4[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R30} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R29} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.5.4 trace is safe.
    @Test
    public void test42() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.5.5[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R30} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R29} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.5.5 trace is safe.
    @Test
    public void test43() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.5.6[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R30} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R29} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.5.6 trace is safe.
    @Test
    public void test44() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.5.7[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R30} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.5.7 trace is safe.
    @Test
    public void test45() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.5.8[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R30} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.5.8 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test46() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.5.9[6]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R30} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "next")); // {R29} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.5.9 trace is safe.
    @Test
    public void test47() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.6//.1[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R30} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R29} == Object[10] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.6//.1 trace is safe.
    @Test
    public void test48() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.6.2[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R30} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R29} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.6.2 trace is safe.
    @Test
    public void test49() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.6.3[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R30} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R29} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.6.3 trace is safe.
    @Test
    public void test50() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.6.4[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R30} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R29} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.6.4 trace is safe.
    @Test
    public void test51() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.6.5[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R30} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R29} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.6.5 trace is safe.
    @Test
    public void test52() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.6.6[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R30} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R29} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.6.6 trace is safe.
    @Test
    public void test53() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.6.7[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R30} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.6.7 trace is safe.
    @Test
    public void test54() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.6.8[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R30} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.6.8 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test55() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.6.9[6]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R30} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "next")); // {R29} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.6.9 trace is safe.
    @Test
    public void test56() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.7//.1[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R29} == Object[10] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.7//.1 trace is safe.
    @Test
    public void test57() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.7.2[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R29} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.7.2 trace is safe.
    @Test
    public void test58() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.7.3[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R29} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.7.3 trace is safe.
    @Test
    public void test59() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.7.4[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R29} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.7.4 trace is safe.
    @Test
    public void test60() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.7.5[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R29} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.7.5 trace is safe.
    @Test
    public void test61() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.7.6[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R29} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.7.6 trace is safe.
    @Test
    public void test62() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.7.7[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.7.7 trace is safe.
    @Test
    public void test63() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.7.8[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.7.8 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test64() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.7.9[6]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "next")); // {R29} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.7.9 trace is safe.
    @Test
    public void test65() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.8//.1[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R29} == Object[10] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.8//.1 trace is safe.
    @Test
    public void test66() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.8.2[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R29} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.8.2 trace is safe.
    @Test
    public void test67() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.8.3[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R29} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.8.3 trace is safe.
    @Test
    public void test68() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.8.4[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R29} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.8.4 trace is safe.
    @Test
    public void test69() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.8.5[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R29} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.8.5 trace is safe.
    @Test
    public void test70() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.8.6[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R29} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.8.6 trace is safe.
    @Test
    public void test71() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.8.7[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.8.7 trace is safe.
    @Test
    public void test72() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.8.8[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.8.8 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test73() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.8.9[6]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "next")); // {R29} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.8.9 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test74() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.9//.1[1]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "previous")); // {R30} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R29} == Object[10] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.9//.1 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test75() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.9.2[1]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "previous")); // {R30} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R29} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.9.2 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test76() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.9.3[1]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "previous")); // {R30} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R29} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.9.3 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test77() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.9.4[1]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "previous")); // {R30} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R29} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.9.4 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test78() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.9.5[1]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "previous")); // {R30} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R29} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.9.5 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test79() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.9.6[1]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "previous")); // {R30} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R29} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.9.6 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test80() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.9.7[1]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "previous")); // {R30} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.9.7 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test81() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.9.8[1]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "previous")); // {R30} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.9.8 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test82() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.9.9[1]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "previous")); // {R30} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "next")); // {R29} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1//.1.9.9 trace is safe.
    @Test
    public void test83() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2//.1//.1[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R30} == Object[10] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R29} == Object[11] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2//.1//.1 trace is safe.
    @Test
    public void test84() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2//.1.2[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R30} == Object[10] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R29} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2//.1.2 trace is safe.
    @Test
    public void test85() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2//.1.3[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R30} == Object[10] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R29} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2//.1.3 trace is safe.
    @Test
    public void test86() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2//.1.4[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R30} == Object[10] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R29} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2//.1.4 trace is safe.
    @Test
    public void test87() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2//.1.5[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R30} == Object[10] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R29} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2//.1.5 trace is safe.
    @Test
    public void test88() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2//.1.6[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R30} == Object[10] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R29} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2//.1.6 trace is safe.
    @Test
    public void test89() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2//.1.7[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R30} == Object[10] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2//.1.7 trace is safe.
    @Test
    public void test90() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2//.1.8[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R30} == Object[10] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2//.1.8 trace is safe.
    @Test
    public void test91() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2//.1.9[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R30} == Object[10] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").get("previous").getValue()); // {R29} == Object[10] (aliases {ROOT}:dll.header.next.next.next.next.next.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2//.1.9 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test92() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2//.1//.10[6]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R30} == Object[10] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "next")); // {R29} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2//.1//.10 trace is safe.
    @Test
    public void test93() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.2//.1[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R30} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R29} == Object[10] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.2//.1 trace is safe.
    @Test
    public void test94() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.2.2[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R30} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R29} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.2.2 trace is safe.
    @Test
    public void test95() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.2.3[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R30} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R29} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.2.3 trace is safe.
    @Test
    public void test96() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.2.4[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R30} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R29} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.2.4 trace is safe.
    @Test
    public void test97() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.2.5[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R30} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R29} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.2.5 trace is safe.
    @Test
    public void test98() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.2.6[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R30} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R29} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.2.6 trace is safe.
    @Test
    public void test99() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.2.7[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R30} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.2.7 trace is safe.
    @Test
    public void test100() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.2.8[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R30} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.2.8 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test101() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.2.9[6]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R30} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "next")); // {R29} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.2.9 trace is safe.
    @Test
    public void test102() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.3//.1[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R30} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R29} == Object[10] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.3//.1 trace is safe.
    @Test
    public void test103() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.3.2[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R30} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R29} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.3.2 trace is safe.
    @Test
    public void test104() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.3.3[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R30} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R29} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.3.3 trace is safe.
    @Test
    public void test105() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.3.4[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R30} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R29} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.3.4 trace is safe.
    @Test
    public void test106() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.3.5[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R30} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R29} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.3.5 trace is safe.
    @Test
    public void test107() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.3.6[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R30} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R29} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.3.6 trace is safe.
    @Test
    public void test108() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.3.7[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R30} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.3.7 trace is safe.
    @Test
    public void test109() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.3.8[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R30} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.3.8 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test110() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.3.9[6]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R30} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "next")); // {R29} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.3.9 trace is safe.
    @Test
    public void test111() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.4//.1[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R30} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R29} == Object[10] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.4//.1 trace is safe.
    @Test
    public void test112() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.4.2[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R30} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R29} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.4.2 trace is safe.
    @Test
    public void test113() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.4.3[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R30} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R29} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.4.3 trace is safe.
    @Test
    public void test114() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.4.4[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R30} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R29} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.4.4 trace is safe.
    @Test
    public void test115() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.4.5[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R30} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R29} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.4.5 trace is safe.
    @Test
    public void test116() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.4.6[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R30} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R29} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.4.6 trace is safe.
    @Test
    public void test117() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.4.7[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R30} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.4.7 trace is safe.
    @Test
    public void test118() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.4.8[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R30} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.4.8 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test119() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.4.9[6]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R30} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "next")); // {R29} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.4.9 trace is safe.
    @Test
    public void test120() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.5//.1[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R30} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R29} == Object[10] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.5//.1 trace is safe.
    @Test
    public void test121() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.5.2[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R30} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R29} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.5.2 trace is safe.
    @Test
    public void test122() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.5.3[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R30} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R29} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.5.3 trace is safe.
    @Test
    public void test123() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.5.4[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R30} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R29} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.5.4 trace is safe.
    @Test
    public void test124() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.5.5[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R30} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R29} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.5.5 trace is safe.
    @Test
    public void test125() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.5.6[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R30} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R29} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.5.6 trace is safe.
    @Test
    public void test126() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.5.7[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R30} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.5.7 trace is safe.
    @Test
    public void test127() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.5.8[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R30} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.5.8 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test128() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.5.9[6]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R30} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "next")); // {R29} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.5.9 trace is safe.
    @Test
    public void test129() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.6//.1[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R30} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R29} == Object[10] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.6//.1 trace is safe.
    @Test
    public void test130() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.6.2[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R30} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R29} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.6.2 trace is safe.
    @Test
    public void test131() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.6.3[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R30} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R29} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.6.3 trace is safe.
    @Test
    public void test132() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.6.4[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R30} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R29} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.6.4 trace is safe.
    @Test
    public void test133() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.6.5[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R30} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R29} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.6.5 trace is safe.
    @Test
    public void test134() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.6.6[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R30} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R29} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.6.6 trace is safe.
    @Test
    public void test135() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.6.7[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R30} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.6.7 trace is safe.
    @Test
    public void test136() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.6.8[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R30} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.6.8 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test137() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.6.9[6]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R30} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "next")); // {R29} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.6.9 trace is safe.
    @Test
    public void test138() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.7//.1[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R29} == Object[10] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.7//.1 trace is safe.
    @Test
    public void test139() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.7.2[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R29} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.7.2 trace is safe.
    @Test
    public void test140() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.7.3[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R29} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.7.3 trace is safe.
    @Test
    public void test141() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.7.4[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R29} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.7.4 trace is safe.
    @Test
    public void test142() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.7.5[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R29} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.7.5 trace is safe.
    @Test
    public void test143() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.7.6[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R29} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.7.6 trace is safe.
    @Test
    public void test144() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.7.7[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.7.7 trace is safe.
    @Test
    public void test145() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.7.8[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.7.8 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test146() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.7.9[6]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "next")); // {R29} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.7.9 trace is safe.
    @Test
    public void test147() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.8//.1[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R29} == Object[10] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.8//.1 trace is safe.
    @Test
    public void test148() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.8.2[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R29} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.8.2 trace is safe.
    @Test
    public void test149() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.8.3[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R29} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.8.3 trace is safe.
    @Test
    public void test150() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.8.4[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R29} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.8.4 trace is safe.
    @Test
    public void test151() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.8.5[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R29} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.8.5 trace is safe.
    @Test
    public void test152() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.8.6[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R29} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.8.6 trace is safe.
    @Test
    public void test153() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.8.7[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.8.7 trace is safe.
    @Test
    public void test154() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.8.8[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.8.8 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test155() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.8.9[6]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "next")); // {R29} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.8.9 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test156() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.9//.1[1]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "previous")); // {R30} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R29} == Object[10] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.9//.1 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test157() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.9.2[1]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "previous")); // {R30} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R29} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.9.2 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test158() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.9.3[1]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "previous")); // {R30} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R29} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.9.3 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test159() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.9.4[1]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "previous")); // {R30} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R29} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.9.4 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test160() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.9.5[1]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "previous")); // {R30} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R29} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.9.5 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test161() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.9.6[1]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "previous")); // {R30} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R29} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.9.6 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test162() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.9.7[1]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "previous")); // {R30} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.9.7 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test163() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.9.8[1]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "previous")); // {R30} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.9.8 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test164() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.9.9[1]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "previous")); // {R30} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "next")); // {R29} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.2.9.9 trace is safe.
    @Test
    public void test165() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3//.1//.1[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R30} == Object[10] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R29} == Object[11] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3//.1//.1 trace is safe.
    @Test
    public void test166() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3//.1.2[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R30} == Object[10] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R29} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3//.1.2 trace is safe.
    @Test
    public void test167() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3//.1.3[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R30} == Object[10] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R29} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3//.1.3 trace is safe.
    @Test
    public void test168() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3//.1.4[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R30} == Object[10] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R29} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3//.1.4 trace is safe.
    @Test
    public void test169() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3//.1.5[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R30} == Object[10] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R29} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3//.1.5 trace is safe.
    @Test
    public void test170() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3//.1.6[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R30} == Object[10] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R29} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3//.1.6 trace is safe.
    @Test
    public void test171() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3//.1.7[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R30} == Object[10] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3//.1.7 trace is safe.
    @Test
    public void test172() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3//.1.8[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R30} == Object[10] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3//.1.8 trace is safe.
    @Test
    public void test173() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3//.1.9[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R30} == Object[10] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").get("previous").getValue()); // {R29} == Object[10] (aliases {ROOT}:dll.header.next.next.next.next.next.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3//.1.9 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test174() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3//.1//.10[6]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R30} == Object[10] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "next")); // {R29} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3//.1//.10 trace is safe.
    @Test
    public void test175() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.2//.1[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R30} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R29} == Object[10] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.2//.1 trace is safe.
    @Test
    public void test176() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.2.2[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R30} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R29} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.2.2 trace is safe.
    @Test
    public void test177() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.2.3[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R30} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R29} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.2.3 trace is safe.
    @Test
    public void test178() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.2.4[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R30} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R29} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.2.4 trace is safe.
    @Test
    public void test179() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.2.5[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R30} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R29} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.2.5 trace is safe.
    @Test
    public void test180() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.2.6[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R30} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R29} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.2.6 trace is safe.
    @Test
    public void test181() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.2.7[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R30} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.2.7 trace is safe.
    @Test
    public void test182() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.2.8[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R30} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.2.8 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test183() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.2.9[6]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R30} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "next")); // {R29} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.2.9 trace is safe.
    @Test
    public void test184() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.3//.1[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R30} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R29} == Object[10] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.3//.1 trace is safe.
    @Test
    public void test185() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.3.2[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R30} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R29} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.3.2 trace is safe.
    @Test
    public void test186() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.3.3[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R30} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R29} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.3.3 trace is safe.
    @Test
    public void test187() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.3.4[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R30} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R29} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.3.4 trace is safe.
    @Test
    public void test188() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.3.5[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R30} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R29} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.3.5 trace is safe.
    @Test
    public void test189() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.3.6[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R30} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R29} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.3.6 trace is safe.
    @Test
    public void test190() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.3.7[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R30} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.3.7 trace is safe.
    @Test
    public void test191() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.3.8[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R30} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.3.8 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test192() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.3.9[6]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R30} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "next")); // {R29} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.3.9 trace is safe.
    @Test
    public void test193() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.4//.1[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R30} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R29} == Object[10] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.4//.1 trace is safe.
    @Test
    public void test194() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.4.2[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R30} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R29} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.4.2 trace is safe.
    @Test
    public void test195() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.4.3[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R30} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R29} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.4.3 trace is safe.
    @Test
    public void test196() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.4.4[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R30} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R29} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.4.4 trace is safe.
    @Test
    public void test197() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.4.5[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R30} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R29} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.4.5 trace is safe.
    @Test
    public void test198() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.4.6[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R30} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R29} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.4.6 trace is safe.
    @Test
    public void test199() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.4.7[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R30} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.4.7 trace is safe.
    @Test
    public void test200() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.4.8[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R30} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.4.8 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test201() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.4.9[6]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R30} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "next")); // {R29} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.4.9 trace is safe.
    @Test
    public void test202() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.5//.1[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R30} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R29} == Object[10] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.5//.1 trace is safe.
    @Test
    public void test203() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.5.2[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R30} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R29} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.5.2 trace is safe.
    @Test
    public void test204() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.5.3[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R30} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R29} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.5.3 trace is safe.
    @Test
    public void test205() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.5.4[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R30} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R29} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.5.4 trace is safe.
    @Test
    public void test206() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.5.5[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R30} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R29} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.5.5 trace is safe.
    @Test
    public void test207() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.5.6[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R30} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R29} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.5.6 trace is safe.
    @Test
    public void test208() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.5.7[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R30} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.5.7 trace is safe.
    @Test
    public void test209() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.5.8[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R30} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.5.8 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test210() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.5.9[6]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R30} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "next")); // {R29} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.5.9 trace is safe.
    @Test
    public void test211() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.6//.1[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R30} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R29} == Object[10] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.6//.1 trace is safe.
    @Test
    public void test212() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.6.2[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R30} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R29} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.6.2 trace is safe.
    @Test
    public void test213() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.6.3[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R30} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R29} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.6.3 trace is safe.
    @Test
    public void test214() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.6.4[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R30} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R29} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.6.4 trace is safe.
    @Test
    public void test215() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.6.5[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R30} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R29} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.6.5 trace is safe.
    @Test
    public void test216() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.6.6[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R30} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R29} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.6.6 trace is safe.
    @Test
    public void test217() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.6.7[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R30} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.6.7 trace is safe.
    @Test
    public void test218() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.6.8[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R30} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.6.8 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test219() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.6.9[6]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R30} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "next")); // {R29} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.6.9 trace is safe.
    @Test
    public void test220() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.7//.1[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R29} == Object[10] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.7//.1 trace is safe.
    @Test
    public void test221() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.7.2[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R29} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.7.2 trace is safe.
    @Test
    public void test222() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.7.3[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R29} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.7.3 trace is safe.
    @Test
    public void test223() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.7.4[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R29} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.7.4 trace is safe.
    @Test
    public void test224() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.7.5[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R29} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.7.5 trace is safe.
    @Test
    public void test225() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.7.6[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R29} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.7.6 trace is safe.
    @Test
    public void test226() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.7.7[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.7.7 trace is safe.
    @Test
    public void test227() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.7.8[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.7.8 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test228() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.7.9[6]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "next")); // {R29} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.7.9 trace is safe.
    @Test
    public void test229() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.8//.1[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R29} == Object[10] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.8//.1 trace is safe.
    @Test
    public void test230() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.8.2[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R29} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.8.2 trace is safe.
    @Test
    public void test231() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.8.3[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R29} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.8.3 trace is safe.
    @Test
    public void test232() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.8.4[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R29} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.8.4 trace is safe.
    @Test
    public void test233() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.8.5[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R29} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.8.5 trace is safe.
    @Test
    public void test234() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.8.6[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R29} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.8.6 trace is safe.
    @Test
    public void test235() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.8.7[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.8.7 trace is safe.
    @Test
    public void test236() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.8.8[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.8.8 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test237() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.8.9[6]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "next")); // {R29} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.8.9 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test238() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.9//.1[1]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "previous")); // {R30} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R29} == Object[10] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.9//.1 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test239() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.9.2[1]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "previous")); // {R30} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R29} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.9.2 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test240() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.9.3[1]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "previous")); // {R30} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R29} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.9.3 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test241() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.9.4[1]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "previous")); // {R30} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R29} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.9.4 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test242() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.9.5[1]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "previous")); // {R30} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R29} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.9.5 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test243() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.9.6[1]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "previous")); // {R30} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R29} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.9.6 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test244() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.9.7[1]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "previous")); // {R30} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.9.7 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test245() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.9.8[1]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "previous")); // {R30} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.9.8 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test246() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.9.9[1]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "previous")); // {R30} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "next")); // {R29} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1//.1.3.9.9 trace is safe.
    @Test(expected=java.util.NoSuchElementException.class)
    public void test247() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.2[52]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R25} == Object[2] (aliases {ROOT}:dll.header)
        ; // pre_init(java/util/NoSuchElementException)
        ; // pre_init(java/lang/RuntimeException)
        ; // pre_init(java/lang/Exception)
        ; // pre_init(java/lang/Throwable)
        ; // !pre_init(java/lang/String)
        ; // !pre_init(java/lang/String$CaseInsensitiveComparator)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.2 trace is safe.
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.3//.1 {ROOT}:dll.header.previous.element not expanded. It may be a hint of too strong user-defined constraints, possibly correct when enforcing redundancy by representation invariant.
    @Test
    public void test248() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.3//.1//.1[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R25} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("element", __ROOT_this); // {R8} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("previous", newInstance("common.LinkedList$Entry")); // {R10} == Object[9] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.3//.1//.1 trace is safe.
    @Test
    public void test249() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.3//.1.2[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R25} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("element", __ROOT_this); // {R8} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R10} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.3//.1.2 trace is safe.
    @Test
    public void test250() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.3//.1.3[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R25} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("element", __ROOT_this); // {R8} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R10} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.3//.1.3 trace is safe.
    @Test
    public void test251() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.3//.1.4[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R25} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("element", __ROOT_this); // {R8} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R10} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.3//.1.4 trace is safe.
    @Test
    public void test252() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.3//.1.5[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R25} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("element", __ROOT_this); // {R8} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R10} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.3//.1.5 trace is safe.
    @Test
    public void test253() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.3//.1.6[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R25} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("element", __ROOT_this); // {R8} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R10} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.3//.1.6 trace is safe.
    @Test
    public void test254() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.3//.1.7[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R25} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("element", __ROOT_this); // {R8} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R10} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.3//.1.7 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test255() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.3//.1.8[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R25} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("element", __ROOT_this); // {R8} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue(), "previous")); // {R10} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.3//.1.8 trace is safe.
    @Test
    public void test256() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.3.2//.1[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R25} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("element", __ROOT_dll); // {R8} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("previous", newInstance("common.LinkedList$Entry")); // {R10} == Object[9] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.3.2//.1 trace is safe.
    @Test
    public void test257() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.3.2.2[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R25} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("element", __ROOT_dll); // {R8} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R10} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.3.2.2 trace is safe.
    @Test
    public void test258() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.3.2.3[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R25} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("element", __ROOT_dll); // {R8} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R10} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.3.2.3 trace is safe.
    @Test
    public void test259() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.3.2.4[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R25} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("element", __ROOT_dll); // {R8} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R10} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.3.2.4 trace is safe.
    @Test
    public void test260() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.3.2.5[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R25} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("element", __ROOT_dll); // {R8} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R10} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.3.2.5 trace is safe.
    @Test
    public void test261() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.3.2.6[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R25} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("element", __ROOT_dll); // {R8} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R10} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.3.2.6 trace is safe.
    @Test
    public void test262() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.3.2.7[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R25} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("element", __ROOT_dll); // {R8} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R10} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.3.2.7 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test263() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.3.2.8[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R25} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("element", __ROOT_dll); // {R8} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue(), "previous")); // {R10} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.3.2.8 trace is safe.
    @Test
    public void test264() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.3.3//.1[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R25} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue(), "element")); // {R8} == null
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("previous", newInstance("common.LinkedList$Entry")); // {R10} == Object[9] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.3.3//.1 trace is safe.
    @Test
    public void test265() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.3.3.2[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R25} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue(), "element")); // {R8} == null
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R10} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.3.3.2 trace is safe.
    @Test
    public void test266() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.3.3.3[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R25} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue(), "element")); // {R8} == null
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R10} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.3.3.3 trace is safe.
    @Test
    public void test267() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.3.3.4[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R25} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue(), "element")); // {R8} == null
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R10} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.3.3.4 trace is safe.
    @Test
    public void test268() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.3.3.5[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R25} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue(), "element")); // {R8} == null
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R10} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.3.3.5 trace is safe.
    @Test
    public void test269() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.3.3.6[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R25} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue(), "element")); // {R8} == null
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R10} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.3.3.6 trace is safe.
    @Test
    public void test270() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.3.3.7[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R25} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue(), "element")); // {R8} == null
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R10} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.3.3.7 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test271() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.3.3.8[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R25} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue(), "element")); // {R8} == null
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue(), "previous")); // {R10} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.3.3.8 trace is safe.
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.4//.1 {ROOT}:dll.header.next.element not expanded. It may be a hint of too strong user-defined constraints, possibly correct when enforcing redundancy by representation invariant.
    @Test
    public void test272() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.4//.1//.1[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R25} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_this); // {R12} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R14} == Object[9] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.4//.1//.1 trace is safe.
    @Test
    public void test273() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.4//.1.2[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R25} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_this); // {R12} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R14} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.4//.1.2 trace is safe.
    @Test
    public void test274() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.4//.1.3[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R25} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_this); // {R12} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R14} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.4//.1.3 trace is safe.
    @Test
    public void test275() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.4//.1.4[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R25} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_this); // {R12} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R14} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.4//.1.4 trace is safe.
    @Test
    public void test276() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.4//.1.5[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R25} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_this); // {R12} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R14} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.4//.1.5 trace is safe.
    @Test
    public void test277() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.4//.1.6[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R25} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_this); // {R12} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R14} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.4//.1.6 trace is safe.
    @Test
    public void test278() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.4//.1.7[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R25} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_this); // {R12} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R14} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.4//.1.7 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test279() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.4//.1.8[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R25} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_this); // {R12} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "previous")); // {R14} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.4//.1.8 trace is safe.
    @Test
    public void test280() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.4.2//.1[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R25} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_dll); // {R12} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R14} == Object[9] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.4.2//.1 trace is safe.
    @Test
    public void test281() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.4.2.2[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R25} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_dll); // {R12} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R14} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.4.2.2 trace is safe.
    @Test
    public void test282() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.4.2.3[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R25} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_dll); // {R12} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R14} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.4.2.3 trace is safe.
    @Test
    public void test283() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.4.2.4[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R25} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_dll); // {R12} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R14} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.4.2.4 trace is safe.
    @Test
    public void test284() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.4.2.5[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R25} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_dll); // {R12} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R14} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.4.2.5 trace is safe.
    @Test
    public void test285() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.4.2.6[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R25} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_dll); // {R12} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R14} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.4.2.6 trace is safe.
    @Test
    public void test286() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.4.2.7[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R25} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_dll); // {R12} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R14} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.4.2.7 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test287() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.4.2.8[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R25} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_dll); // {R12} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "previous")); // {R14} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.4.2.8 trace is safe.
    @Test
    public void test288() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.4.3//.1[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R25} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "element")); // {R12} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R14} == Object[9] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.4.3//.1 trace is safe.
    @Test
    public void test289() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.4.3.2[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R25} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "element")); // {R12} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R14} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.4.3.2 trace is safe.
    @Test
    public void test290() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.4.3.3[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R25} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "element")); // {R12} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R14} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.4.3.3 trace is safe.
    @Test
    public void test291() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.4.3.4[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R25} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "element")); // {R12} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R14} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.4.3.4 trace is safe.
    @Test
    public void test292() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.4.3.5[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R25} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "element")); // {R12} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R14} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.4.3.5 trace is safe.
    @Test
    public void test293() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.4.3.6[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R25} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "element")); // {R12} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R14} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.4.3.6 trace is safe.
    @Test
    public void test294() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.4.3.7[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R25} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "element")); // {R12} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R14} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.4.3.7 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test295() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.4.3.8[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R25} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "element")); // {R12} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "previous")); // {R14} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.4.3.8 trace is safe.
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.5//.1 {ROOT}:dll.header.next.next.element not expanded. It may be a hint of too strong user-defined constraints, possibly correct when enforcing redundancy by representation invariant.
    @Test
    public void test296() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.5//.1//.1[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R25} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_this); // {R16} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R18} == Object[9] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.5//.1//.1 trace is safe.
    @Test
    public void test297() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.5//.1.2[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R25} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_this); // {R16} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R18} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.5//.1.2 trace is safe.
    @Test
    public void test298() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.5//.1.3[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R25} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_this); // {R16} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R18} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.5//.1.3 trace is safe.
    @Test
    public void test299() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.5//.1.4[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R25} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_this); // {R16} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R18} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.5//.1.4 trace is safe.
    @Test
    public void test300() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.5//.1.5[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R25} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_this); // {R16} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R18} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.5//.1.5 trace is safe.
    @Test
    public void test301() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.5//.1.6[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R25} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_this); // {R16} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R18} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.5//.1.6 trace is safe.
    @Test
    public void test302() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.5//.1.7[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R25} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_this); // {R16} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R18} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.5//.1.7 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test303() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.5//.1.8[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R25} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_this); // {R16} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "previous")); // {R18} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.5//.1.8 trace is safe.
    @Test
    public void test304() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.5.2//.1[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R25} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_dll); // {R16} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R18} == Object[9] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.5.2//.1 trace is safe.
    @Test
    public void test305() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.5.2.2[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R25} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_dll); // {R16} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R18} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.5.2.2 trace is safe.
    @Test
    public void test306() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.5.2.3[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R25} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_dll); // {R16} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R18} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.5.2.3 trace is safe.
    @Test
    public void test307() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.5.2.4[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R25} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_dll); // {R16} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R18} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.5.2.4 trace is safe.
    @Test
    public void test308() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.5.2.5[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R25} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_dll); // {R16} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R18} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.5.2.5 trace is safe.
    @Test
    public void test309() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.5.2.6[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R25} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_dll); // {R16} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R18} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.5.2.6 trace is safe.
    @Test
    public void test310() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.5.2.7[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R25} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_dll); // {R16} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R18} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.5.2.7 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test311() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.5.2.8[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R25} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_dll); // {R16} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "previous")); // {R18} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.5.2.8 trace is safe.
    @Test
    public void test312() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.5.3//.1[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R25} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "element")); // {R16} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R18} == Object[9] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.5.3//.1 trace is safe.
    @Test
    public void test313() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.5.3.2[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R25} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "element")); // {R16} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R18} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.5.3.2 trace is safe.
    @Test
    public void test314() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.5.3.3[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R25} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "element")); // {R16} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R18} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.5.3.3 trace is safe.
    @Test
    public void test315() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.5.3.4[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R25} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "element")); // {R16} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R18} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.5.3.4 trace is safe.
    @Test
    public void test316() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.5.3.5[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R25} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "element")); // {R16} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R18} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.5.3.5 trace is safe.
    @Test
    public void test317() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.5.3.6[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R25} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "element")); // {R16} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R18} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.5.3.6 trace is safe.
    @Test
    public void test318() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.5.3.7[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R25} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "element")); // {R16} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R18} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.5.3.7 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test319() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.5.3.8[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R25} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "element")); // {R16} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "previous")); // {R18} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.5.3.8 trace is safe.
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.6//.1 {ROOT}:dll.header.next.next.next.element not expanded. It may be a hint of too strong user-defined constraints, possibly correct when enforcing redundancy by representation invariant.
    @Test
    public void test320() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.6//.1//.1[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R25} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_this); // {R20} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R22} == Object[9] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.6//.1//.1 trace is safe.
    @Test
    public void test321() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.6//.1.2[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R25} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_this); // {R20} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R22} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.6//.1.2 trace is safe.
    @Test
    public void test322() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.6//.1.3[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R25} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_this); // {R20} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R22} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.6//.1.3 trace is safe.
    @Test
    public void test323() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.6//.1.4[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R25} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_this); // {R20} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R22} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.6//.1.4 trace is safe.
    @Test
    public void test324() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.6//.1.5[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R25} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_this); // {R20} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R22} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.6//.1.5 trace is safe.
    @Test
    public void test325() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.6//.1.6[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R25} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_this); // {R20} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R22} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.6//.1.6 trace is safe.
    @Test
    public void test326() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.6//.1.7[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R25} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_this); // {R20} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R22} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.6//.1.7 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test327() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.6//.1.8[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R25} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_this); // {R20} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue(), "previous")); // {R22} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.6//.1.8 trace is safe.
    @Test
    public void test328() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.6.2//.1[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R25} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_dll); // {R20} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R22} == Object[9] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.6.2//.1 trace is safe.
    @Test
    public void test329() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.6.2.2[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R25} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_dll); // {R20} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R22} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.6.2.2 trace is safe.
    @Test
    public void test330() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.6.2.3[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R25} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_dll); // {R20} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R22} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.6.2.3 trace is safe.
    @Test
    public void test331() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.6.2.4[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R25} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_dll); // {R20} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R22} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.6.2.4 trace is safe.
    @Test
    public void test332() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.6.2.5[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R25} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_dll); // {R20} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R22} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.6.2.5 trace is safe.
    @Test
    public void test333() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.6.2.6[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R25} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_dll); // {R20} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R22} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.6.2.6 trace is safe.
    @Test
    public void test334() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.6.2.7[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R25} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_dll); // {R20} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R22} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.6.2.7 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test335() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.6.2.8[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R25} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_dll); // {R20} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue(), "previous")); // {R22} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.6.2.8 trace is safe.
    @Test
    public void test336() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.6.3//.1[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R25} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue(), "element")); // {R20} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R22} == Object[9] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.6.3//.1 trace is safe.
    @Test
    public void test337() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.6.3.2[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R25} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue(), "element")); // {R20} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R22} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.6.3.2 trace is safe.
    @Test
    public void test338() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.6.3.3[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R25} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue(), "element")); // {R20} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R22} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.6.3.3 trace is safe.
    @Test
    public void test339() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.6.3.4[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R25} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue(), "element")); // {R20} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R22} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.6.3.4 trace is safe.
    @Test
    public void test340() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.6.3.5[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R25} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue(), "element")); // {R20} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R22} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.6.3.5 trace is safe.
    @Test
    public void test341() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.6.3.6[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R25} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue(), "element")); // {R20} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R22} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.6.3.6 trace is safe.
    @Test
    public void test342() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.6.3.7[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R25} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue(), "element")); // {R20} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R22} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.6.3.7 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test343() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.6.3.8[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R25} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue(), "element")); // {R20} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue(), "previous")); // {R22} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.6.3.8 trace is safe.
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.7//.1 {ROOT}:dll.header.next.next.next.next.element not expanded. It may be a hint of too strong user-defined constraints, possibly correct when enforcing redundancy by representation invariant.
    @Test
    public void test344() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.7//.1//.1[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R25} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R24} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R26} == Object[9] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.7//.1//.1 trace is safe.
    @Test
    public void test345() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.7//.1.2[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R25} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R24} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R26} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.7//.1.2 trace is safe.
    @Test
    public void test346() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.7//.1.3[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R25} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R24} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R26} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.7//.1.3 trace is safe.
    @Test
    public void test347() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.7//.1.4[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R25} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R24} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R26} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.7//.1.4 trace is safe.
    @Test
    public void test348() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.7//.1.5[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R25} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R24} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R26} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.7//.1.5 trace is safe.
    @Test
    public void test349() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.7//.1.6[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R25} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R24} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R26} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.7//.1.6 trace is safe.
    @Test
    public void test350() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.7//.1.7[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R25} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R24} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R26} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.7//.1.7 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test351() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.7//.1.8[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R25} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R24} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue(), "previous")); // {R26} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.7//.1.8 trace is safe.
    @Test
    public void test352() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.7.2//.1[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R25} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R24} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R26} == Object[9] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.7.2//.1 trace is safe.
    @Test
    public void test353() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.7.2.2[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R25} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R24} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R26} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.7.2.2 trace is safe.
    @Test
    public void test354() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.7.2.3[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R25} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R24} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R26} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.7.2.3 trace is safe.
    @Test
    public void test355() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.7.2.4[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R25} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R24} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R26} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.7.2.4 trace is safe.
    @Test
    public void test356() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.7.2.5[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R25} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R24} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R26} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.7.2.5 trace is safe.
    @Test
    public void test357() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.7.2.6[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R25} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R24} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R26} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.7.2.6 trace is safe.
    @Test
    public void test358() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.7.2.7[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R25} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R24} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R26} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.7.2.7 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test359() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.7.2.8[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R25} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R24} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue(), "previous")); // {R26} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.7.2.8 trace is safe.
    @Test
    public void test360() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.7.3//.1[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R25} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue(), "element")); // {R24} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R26} == Object[9] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.7.3//.1 trace is safe.
    @Test
    public void test361() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.7.3.2[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R25} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue(), "element")); // {R24} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R26} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.7.3.2 trace is safe.
    @Test
    public void test362() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.7.3.3[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R25} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue(), "element")); // {R24} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R26} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.7.3.3 trace is safe.
    @Test
    public void test363() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.7.3.4[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R25} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue(), "element")); // {R24} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R26} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.7.3.4 trace is safe.
    @Test
    public void test364() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.7.3.5[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R25} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue(), "element")); // {R24} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R26} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.7.3.5 trace is safe.
    @Test
    public void test365() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.7.3.6[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R25} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue(), "element")); // {R24} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R26} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.7.3.6 trace is safe.
    @Test
    public void test366() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.7.3.7[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R25} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue(), "element")); // {R24} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R26} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.7.3.7 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test367() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.7.3.8[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R25} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue(), "element")); // {R24} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue(), "previous")); // {R26} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.7.3.8 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test368() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1//.1.8[14]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue(), "next")); // {R25} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1//.1.8 trace is safe.
//.1//.1//.1//.1//.1.2//.1//.1//.1.2//.1 {ROOT}:dll.header.next.element not expanded. It may be a hint of too strong user-defined constraints, possibly correct when enforcing redundancy by representation invariant.
    @Test
    public void test369() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1.2//.1//.1[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R21} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_this); // {R12} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R14} == Object[8] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1.2//.1//.1 trace is safe.
    @Test
    public void test370() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1.2//.1.2[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R21} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_this); // {R12} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R14} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1.2//.1.2 trace is safe.
    @Test
    public void test371() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1.2//.1.3[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R21} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_this); // {R12} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R14} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1.2//.1.3 trace is safe.
    @Test
    public void test372() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1.2//.1.4[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R21} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_this); // {R12} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R14} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1.2//.1.4 trace is safe.
    @Test
    public void test373() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1.2//.1.5[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R21} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_this); // {R12} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R14} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1.2//.1.5 trace is safe.
    @Test
    public void test374() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1.2//.1.6[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R21} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_this); // {R12} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R14} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1.2//.1.6 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test375() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1.2//.1.7[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R21} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_this); // {R12} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "previous")); // {R14} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1.2//.1.7 trace is safe.
    @Test
    public void test376() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1.2.2//.1[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R21} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_dll); // {R12} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R14} == Object[8] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1.2.2//.1 trace is safe.
    @Test
    public void test377() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1.2.2.2[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R21} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_dll); // {R12} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R14} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1.2.2.2 trace is safe.
    @Test
    public void test378() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1.2.2.3[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R21} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_dll); // {R12} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R14} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1.2.2.3 trace is safe.
    @Test
    public void test379() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1.2.2.4[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R21} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_dll); // {R12} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R14} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1.2.2.4 trace is safe.
    @Test
    public void test380() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1.2.2.5[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R21} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_dll); // {R12} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R14} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1.2.2.5 trace is safe.
    @Test
    public void test381() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1.2.2.6[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R21} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_dll); // {R12} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R14} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1.2.2.6 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test382() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1.2.2.7[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R21} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_dll); // {R12} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "previous")); // {R14} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1.2.2.7 trace is safe.
    @Test
    public void test383() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1.2.3//.1[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R21} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "element")); // {R12} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R14} == Object[8] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1.2.3//.1 trace is safe.
    @Test
    public void test384() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1.2.3.2[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R21} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "element")); // {R12} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R14} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1.2.3.2 trace is safe.
    @Test
    public void test385() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1.2.3.3[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R21} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "element")); // {R12} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R14} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1.2.3.3 trace is safe.
    @Test
    public void test386() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1.2.3.4[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R21} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "element")); // {R12} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R14} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1.2.3.4 trace is safe.
    @Test
    public void test387() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1.2.3.5[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R21} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "element")); // {R12} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R14} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1.2.3.5 trace is safe.
    @Test
    public void test388() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1.2.3.6[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R21} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "element")); // {R12} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R14} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1.2.3.6 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test389() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1.2.3.7[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R21} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "element")); // {R12} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "previous")); // {R14} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1.2.3.7 trace is safe.
    @Test
    public void test390() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1.3[64]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R21} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1.3 trace is safe.
//.1//.1//.1//.1//.1.2//.1//.1//.1.4//.1 {ROOT}:dll.header.next.next.element not expanded. It may be a hint of too strong user-defined constraints, possibly correct when enforcing redundancy by representation invariant.
    @Test
    public void test391() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1.4//.1//.1[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R21} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_this); // {R16} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R18} == Object[8] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1.4//.1//.1 trace is safe.
    @Test
    public void test392() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1.4//.1.2[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R21} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_this); // {R16} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R18} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1.4//.1.2 trace is safe.
    @Test
    public void test393() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1.4//.1.3[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R21} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_this); // {R16} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R18} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1.4//.1.3 trace is safe.
    @Test
    public void test394() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1.4//.1.4[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R21} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_this); // {R16} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R18} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1.4//.1.4 trace is safe.
    @Test
    public void test395() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1.4//.1.5[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R21} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_this); // {R16} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R18} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1.4//.1.5 trace is safe.
    @Test
    public void test396() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1.4//.1.6[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R21} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_this); // {R16} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R18} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1.4//.1.6 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test397() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1.4//.1.7[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R21} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_this); // {R16} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "previous")); // {R18} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1.4//.1.7 trace is safe.
    @Test
    public void test398() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1.4.2//.1[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R21} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_dll); // {R16} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R18} == Object[8] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1.4.2//.1 trace is safe.
    @Test
    public void test399() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1.4.2.2[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R21} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_dll); // {R16} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R18} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1.4.2.2 trace is safe.
    @Test
    public void test400() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1.4.2.3[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R21} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_dll); // {R16} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R18} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1.4.2.3 trace is safe.
    @Test
    public void test401() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1.4.2.4[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R21} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_dll); // {R16} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R18} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1.4.2.4 trace is safe.
    @Test
    public void test402() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1.4.2.5[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R21} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_dll); // {R16} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R18} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1.4.2.5 trace is safe.
    @Test
    public void test403() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1.4.2.6[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R21} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_dll); // {R16} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R18} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1.4.2.6 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test404() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1.4.2.7[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R21} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_dll); // {R16} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "previous")); // {R18} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1.4.2.7 trace is safe.
    @Test
    public void test405() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1.4.3//.1[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R21} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "element")); // {R16} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R18} == Object[8] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1.4.3//.1 trace is safe.
    @Test
    public void test406() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1.4.3.2[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R21} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "element")); // {R16} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R18} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1.4.3.2 trace is safe.
    @Test
    public void test407() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1.4.3.3[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R21} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "element")); // {R16} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R18} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1.4.3.3 trace is safe.
    @Test
    public void test408() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1.4.3.4[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R21} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "element")); // {R16} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R18} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1.4.3.4 trace is safe.
    @Test
    public void test409() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1.4.3.5[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R21} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "element")); // {R16} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R18} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1.4.3.5 trace is safe.
    @Test
    public void test410() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1.4.3.6[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R21} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "element")); // {R16} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R18} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1.4.3.6 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test411() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1.4.3.7[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R21} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "element")); // {R16} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "previous")); // {R18} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1.4.3.7 trace is safe.
//.1//.1//.1//.1//.1.2//.1//.1//.1.5//.1 {ROOT}:dll.header.next.next.next.element not expanded. It may be a hint of too strong user-defined constraints, possibly correct when enforcing redundancy by representation invariant.
    @Test
    public void test412() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1.5//.1//.1[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R21} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_this); // {R20} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R22} == Object[8] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1.5//.1//.1 trace is safe.
    @Test
    public void test413() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1.5//.1.2[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R21} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_this); // {R20} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R22} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1.5//.1.2 trace is safe.
    @Test
    public void test414() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1.5//.1.3[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R21} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_this); // {R20} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R22} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1.5//.1.3 trace is safe.
    @Test
    public void test415() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1.5//.1.4[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R21} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_this); // {R20} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R22} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1.5//.1.4 trace is safe.
    @Test
    public void test416() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1.5//.1.5[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R21} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_this); // {R20} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R22} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1.5//.1.5 trace is safe.
    @Test
    public void test417() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1.5//.1.6[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R21} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_this); // {R20} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R22} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1.5//.1.6 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test418() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1.5//.1.7[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R21} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_this); // {R20} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue(), "previous")); // {R22} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1.5//.1.7 trace is safe.
    @Test
    public void test419() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1.5.2//.1[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R21} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_dll); // {R20} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R22} == Object[8] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1.5.2//.1 trace is safe.
    @Test
    public void test420() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1.5.2.2[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R21} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_dll); // {R20} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R22} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1.5.2.2 trace is safe.
    @Test
    public void test421() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1.5.2.3[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R21} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_dll); // {R20} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R22} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1.5.2.3 trace is safe.
    @Test
    public void test422() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1.5.2.4[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R21} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_dll); // {R20} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R22} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1.5.2.4 trace is safe.
    @Test
    public void test423() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1.5.2.5[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R21} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_dll); // {R20} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R22} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1.5.2.5 trace is safe.
    @Test
    public void test424() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1.5.2.6[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R21} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_dll); // {R20} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R22} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1.5.2.6 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test425() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1.5.2.7[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R21} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_dll); // {R20} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue(), "previous")); // {R22} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1.5.2.7 trace is safe.
    @Test
    public void test426() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1.5.3//.1[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R21} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue(), "element")); // {R20} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R22} == Object[8] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1.5.3//.1 trace is safe.
    @Test
    public void test427() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1.5.3.2[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R21} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue(), "element")); // {R20} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R22} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1.5.3.2 trace is safe.
    @Test
    public void test428() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1.5.3.3[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R21} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue(), "element")); // {R20} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R22} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1.5.3.3 trace is safe.
    @Test
    public void test429() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1.5.3.4[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R21} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue(), "element")); // {R20} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R22} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1.5.3.4 trace is safe.
    @Test
    public void test430() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1.5.3.5[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R21} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue(), "element")); // {R20} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R22} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1.5.3.5 trace is safe.
    @Test
    public void test431() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1.5.3.6[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R21} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue(), "element")); // {R20} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R22} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1.5.3.6 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test432() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1.5.3.7[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R21} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue(), "element")); // {R20} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue(), "previous")); // {R22} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1.5.3.7 trace is safe.
//.1//.1//.1//.1//.1.2//.1//.1//.1.6//.1 {ROOT}:dll.header.next.next.next.element not expanded. It may be a hint of too strong user-defined constraints, possibly correct when enforcing redundancy by representation invariant.
    @Test
    public void test433() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1.6//.1//.1[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R21} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_this); // {R20} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R22} == Object[8] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1.6//.1//.1 trace is safe.
    @Test
    public void test434() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1.6//.1.2[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R21} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_this); // {R20} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R22} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1.6//.1.2 trace is safe.
    @Test
    public void test435() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1.6//.1.3[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R21} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_this); // {R20} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R22} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1.6//.1.3 trace is safe.
    @Test
    public void test436() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1.6//.1.4[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R21} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_this); // {R20} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R22} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1.6//.1.4 trace is safe.
    @Test
    public void test437() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1.6//.1.5[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R21} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_this); // {R20} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R22} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1.6//.1.5 trace is safe.
    @Test
    public void test438() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1.6//.1.6[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R21} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_this); // {R20} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R22} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1.6//.1.6 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test439() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1.6//.1.7[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R21} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_this); // {R20} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue(), "previous")); // {R22} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1.6//.1.7 trace is safe.
    @Test
    public void test440() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1.6.2//.1[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R21} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_dll); // {R20} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R22} == Object[8] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1.6.2//.1 trace is safe.
    @Test
    public void test441() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1.6.2.2[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R21} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_dll); // {R20} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R22} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1.6.2.2 trace is safe.
    @Test
    public void test442() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1.6.2.3[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R21} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_dll); // {R20} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R22} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1.6.2.3 trace is safe.
    @Test
    public void test443() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1.6.2.4[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R21} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_dll); // {R20} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R22} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1.6.2.4 trace is safe.
    @Test
    public void test444() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1.6.2.5[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R21} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_dll); // {R20} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R22} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1.6.2.5 trace is safe.
    @Test
    public void test445() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1.6.2.6[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R21} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_dll); // {R20} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R22} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1.6.2.6 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test446() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1.6.2.7[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R21} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_dll); // {R20} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue(), "previous")); // {R22} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1.6.2.7 trace is safe.
    @Test
    public void test447() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1.6.3//.1[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R21} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue(), "element")); // {R20} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R22} == Object[8] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1.6.3//.1 trace is safe.
    @Test
    public void test448() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1.6.3.2[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R21} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue(), "element")); // {R20} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R22} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1.6.3.2 trace is safe.
    @Test
    public void test449() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1.6.3.3[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R21} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue(), "element")); // {R20} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R22} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1.6.3.3 trace is safe.
    @Test
    public void test450() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1.6.3.4[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R21} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue(), "element")); // {R20} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R22} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1.6.3.4 trace is safe.
    @Test
    public void test451() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1.6.3.5[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R21} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue(), "element")); // {R20} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R22} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1.6.3.5 trace is safe.
    @Test
    public void test452() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1.6.3.6[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R21} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue(), "element")); // {R20} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R22} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1.6.3.6 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test453() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1.6.3.7[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R21} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue(), "element")); // {R20} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue(), "previous")); // {R22} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1.6.3.7 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test454() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1//.1.7[7]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue(), "next")); // {R21} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1//.1.7 trace is safe.
//.1//.1//.1//.1//.1.2//.1//.1.2//.1 {ROOT}:dll.header.next.next.element not expanded. It may be a hint of too strong user-defined constraints, possibly correct when enforcing redundancy by representation invariant.
    @Test
    public void test455() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1.2//.1//.1[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R17} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_this); // {R16} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R18} == Object[7] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1.2//.1//.1 trace is safe.
    @Test
    public void test456() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1.2//.1.2[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R17} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_this); // {R16} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R18} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1.2//.1.2 trace is safe.
    @Test
    public void test457() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1.2//.1.3[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R17} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_this); // {R16} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R18} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1.2//.1.3 trace is safe.
    @Test
    public void test458() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1.2//.1.4[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R17} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_this); // {R16} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R18} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1.2//.1.4 trace is safe.
    @Test
    public void test459() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1.2//.1.5[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R17} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_this); // {R16} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R18} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1.2//.1.5 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test460() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1.2//.1.6[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R17} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_this); // {R16} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "previous")); // {R18} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1.2//.1.6 trace is safe.
    @Test
    public void test461() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1.2.2//.1[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R17} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_dll); // {R16} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R18} == Object[7] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1.2.2//.1 trace is safe.
    @Test
    public void test462() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1.2.2.2[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R17} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_dll); // {R16} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R18} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1.2.2.2 trace is safe.
    @Test
    public void test463() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1.2.2.3[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R17} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_dll); // {R16} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R18} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1.2.2.3 trace is safe.
    @Test
    public void test464() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1.2.2.4[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R17} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_dll); // {R16} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R18} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1.2.2.4 trace is safe.
    @Test
    public void test465() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1.2.2.5[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R17} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_dll); // {R16} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R18} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1.2.2.5 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test466() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1.2.2.6[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R17} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_dll); // {R16} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "previous")); // {R18} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1.2.2.6 trace is safe.
    @Test
    public void test467() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1.2.3//.1[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R17} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "element")); // {R16} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R18} == Object[7] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1.2.3//.1 trace is safe.
    @Test
    public void test468() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1.2.3.2[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R17} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "element")); // {R16} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R18} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1.2.3.2 trace is safe.
    @Test
    public void test469() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1.2.3.3[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R17} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "element")); // {R16} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R18} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1.2.3.3 trace is safe.
    @Test
    public void test470() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1.2.3.4[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R17} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "element")); // {R16} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R18} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1.2.3.4 trace is safe.
    @Test
    public void test471() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1.2.3.5[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R17} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "element")); // {R16} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R18} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1.2.3.5 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test472() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1.2.3.6[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R17} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "element")); // {R16} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "previous")); // {R18} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1.2.3.6 trace is safe.
    @Test(expected=java.util.NoSuchElementException.class)
    public void test473() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1.3[66]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R17} == Object[4] (aliases {ROOT}:dll.header.previous)
        ; // pre_init(java/util/NoSuchElementException)
        ; // pre_init(java/lang/RuntimeException)
        ; // pre_init(java/lang/Exception)
        ; // pre_init(java/lang/Throwable)
        ; // !pre_init(java/lang/String)
        ; // !pre_init(java/lang/String$CaseInsensitiveComparator)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1.3 trace is safe.
//.1//.1//.1//.1//.1.2//.1//.1.4//.1 {ROOT}:dll.header.next.element not expanded. It may be a hint of too strong user-defined constraints, possibly correct when enforcing redundancy by representation invariant.
    @Test
    public void test474() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1.4//.1//.1[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R17} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_this); // {R12} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R14} == Object[7] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1.4//.1//.1 trace is safe.
    @Test
    public void test475() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1.4//.1.2[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R17} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_this); // {R12} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R14} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1.4//.1.2 trace is safe.
    @Test
    public void test476() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1.4//.1.3[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R17} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_this); // {R12} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R14} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1.4//.1.3 trace is safe.
    @Test
    public void test477() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1.4//.1.4[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R17} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_this); // {R12} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R14} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1.4//.1.4 trace is safe.
    @Test
    public void test478() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1.4//.1.5[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R17} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_this); // {R12} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R14} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1.4//.1.5 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test479() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1.4//.1.6[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R17} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_this); // {R12} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "previous")); // {R14} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1.4//.1.6 trace is safe.
    @Test
    public void test480() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1.4.2//.1[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R17} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_dll); // {R12} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R14} == Object[7] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1.4.2//.1 trace is safe.
    @Test
    public void test481() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1.4.2.2[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R17} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_dll); // {R12} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R14} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1.4.2.2 trace is safe.
    @Test
    public void test482() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1.4.2.3[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R17} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_dll); // {R12} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R14} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1.4.2.3 trace is safe.
    @Test
    public void test483() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1.4.2.4[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R17} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_dll); // {R12} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R14} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1.4.2.4 trace is safe.
    @Test
    public void test484() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1.4.2.5[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R17} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_dll); // {R12} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R14} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1.4.2.5 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test485() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1.4.2.6[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R17} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_dll); // {R12} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "previous")); // {R14} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1.4.2.6 trace is safe.
    @Test
    public void test486() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1.4.3//.1[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R17} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "element")); // {R12} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R14} == Object[7] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1.4.3//.1 trace is safe.
    @Test
    public void test487() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1.4.3.2[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R17} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "element")); // {R12} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R14} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1.4.3.2 trace is safe.
    @Test
    public void test488() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1.4.3.3[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R17} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "element")); // {R12} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R14} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1.4.3.3 trace is safe.
    @Test
    public void test489() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1.4.3.4[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R17} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "element")); // {R12} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R14} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1.4.3.4 trace is safe.
    @Test
    public void test490() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1.4.3.5[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R17} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "element")); // {R12} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R14} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1.4.3.5 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test491() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1.4.3.6[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R17} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "element")); // {R12} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "previous")); // {R14} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1.4.3.6 trace is safe.
//.1//.1//.1//.1//.1.2//.1//.1.5//.1 {ROOT}:dll.header.next.next.element not expanded. It may be a hint of too strong user-defined constraints, possibly correct when enforcing redundancy by representation invariant.
    @Test
    public void test492() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1.5//.1//.1[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R17} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_this); // {R16} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R18} == Object[7] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1.5//.1//.1 trace is safe.
    @Test
    public void test493() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1.5//.1.2[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R17} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_this); // {R16} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R18} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1.5//.1.2 trace is safe.
    @Test
    public void test494() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1.5//.1.3[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R17} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_this); // {R16} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R18} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1.5//.1.3 trace is safe.
    @Test
    public void test495() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1.5//.1.4[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R17} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_this); // {R16} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R18} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1.5//.1.4 trace is safe.
    @Test
    public void test496() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1.5//.1.5[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R17} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_this); // {R16} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R18} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1.5//.1.5 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test497() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1.5//.1.6[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R17} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_this); // {R16} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "previous")); // {R18} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1.5//.1.6 trace is safe.
    @Test
    public void test498() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1.5.2//.1[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R17} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_dll); // {R16} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R18} == Object[7] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1.5.2//.1 trace is safe.
    @Test
    public void test499() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1.5.2.2[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R17} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_dll); // {R16} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R18} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1.5.2.2 trace is safe.
    @Test
    public void test500() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1.5.2.3[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R17} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_dll); // {R16} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R18} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1.5.2.3 trace is safe.
    @Test
    public void test501() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1.5.2.4[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R17} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_dll); // {R16} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R18} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1.5.2.4 trace is safe.
    @Test
    public void test502() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1.5.2.5[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R17} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_dll); // {R16} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R18} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1.5.2.5 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test503() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1.5.2.6[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R17} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_dll); // {R16} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "previous")); // {R18} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1.5.2.6 trace is safe.
    @Test
    public void test504() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1.5.3//.1[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R17} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "element")); // {R16} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R18} == Object[7] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1.5.3//.1 trace is safe.
    @Test
    public void test505() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1.5.3.2[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R17} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "element")); // {R16} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R18} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1.5.3.2 trace is safe.
    @Test
    public void test506() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1.5.3.3[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R17} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "element")); // {R16} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R18} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1.5.3.3 trace is safe.
    @Test
    public void test507() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1.5.3.4[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R17} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "element")); // {R16} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R18} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1.5.3.4 trace is safe.
    @Test
    public void test508() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1.5.3.5[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R17} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "element")); // {R16} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R18} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1.5.3.5 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test509() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1.5.3.6[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R17} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "element")); // {R16} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "previous")); // {R18} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1.5.3.6 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test510() {
        //test case for state //.1//.1//.1//.1//.1.2//.1//.1.6[7]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "next")); // {R17} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1//.1.6 trace is safe.
//.1//.1//.1//.1//.1.2//.1.2//.1 {ROOT}:dll.header.next.element not expanded. It may be a hint of too strong user-defined constraints, possibly correct when enforcing redundancy by representation invariant.
    @Test
    public void test511() {
        //test case for state //.1//.1//.1//.1//.1.2//.1.2//.1//.1[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R13} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_this); // {R12} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R14} == Object[6] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1.2//.1//.1 trace is safe.
    @Test
    public void test512() {
        //test case for state //.1//.1//.1//.1//.1.2//.1.2//.1.2[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R13} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_this); // {R12} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R14} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1.2//.1.2 trace is safe.
    @Test
    public void test513() {
        //test case for state //.1//.1//.1//.1//.1.2//.1.2//.1.3[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R13} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_this); // {R12} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R14} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1.2//.1.3 trace is safe.
    @Test
    public void test514() {
        //test case for state //.1//.1//.1//.1//.1.2//.1.2//.1.4[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R13} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_this); // {R12} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R14} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1.2//.1.4 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test515() {
        //test case for state //.1//.1//.1//.1//.1.2//.1.2//.1.5[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R13} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_this); // {R12} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "previous")); // {R14} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1.2//.1.5 trace is safe.
    @Test
    public void test516() {
        //test case for state //.1//.1//.1//.1//.1.2//.1.2.2//.1[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R13} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_dll); // {R12} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R14} == Object[6] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1.2.2//.1 trace is safe.
    @Test
    public void test517() {
        //test case for state //.1//.1//.1//.1//.1.2//.1.2.2.2[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R13} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_dll); // {R12} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R14} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1.2.2.2 trace is safe.
    @Test
    public void test518() {
        //test case for state //.1//.1//.1//.1//.1.2//.1.2.2.3[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R13} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_dll); // {R12} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R14} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1.2.2.3 trace is safe.
    @Test
    public void test519() {
        //test case for state //.1//.1//.1//.1//.1.2//.1.2.2.4[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R13} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_dll); // {R12} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R14} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1.2.2.4 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test520() {
        //test case for state //.1//.1//.1//.1//.1.2//.1.2.2.5[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R13} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_dll); // {R12} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "previous")); // {R14} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1.2.2.5 trace is safe.
    @Test
    public void test521() {
        //test case for state //.1//.1//.1//.1//.1.2//.1.2.3//.1[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R13} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "element")); // {R12} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R14} == Object[6] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1.2.3//.1 trace is safe.
    @Test
    public void test522() {
        //test case for state //.1//.1//.1//.1//.1.2//.1.2.3.2[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R13} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "element")); // {R12} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R14} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1.2.3.2 trace is safe.
    @Test
    public void test523() {
        //test case for state //.1//.1//.1//.1//.1.2//.1.2.3.3[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R13} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "element")); // {R12} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R14} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1.2.3.3 trace is safe.
    @Test
    public void test524() {
        //test case for state //.1//.1//.1//.1//.1.2//.1.2.3.4[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R13} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "element")); // {R12} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R14} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1.2.3.4 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test525() {
        //test case for state //.1//.1//.1//.1//.1.2//.1.2.3.5[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R13} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "element")); // {R12} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "previous")); // {R14} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1.2.3.5 trace is safe.
//.1//.1//.1//.1//.1.2//.1.3//.1 {ROOT}:dll.header.next.element not expanded. It may be a hint of too strong user-defined constraints, possibly correct when enforcing redundancy by representation invariant.
    @Test
    public void test526() {
        //test case for state //.1//.1//.1//.1//.1.2//.1.3//.1//.1[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R13} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_this); // {R12} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R14} == Object[6] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1.3//.1//.1 trace is safe.
    @Test
    public void test527() {
        //test case for state //.1//.1//.1//.1//.1.2//.1.3//.1.2[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R13} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_this); // {R12} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R14} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1.3//.1.2 trace is safe.
    @Test
    public void test528() {
        //test case for state //.1//.1//.1//.1//.1.2//.1.3//.1.3[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R13} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_this); // {R12} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R14} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1.3//.1.3 trace is safe.
    @Test
    public void test529() {
        //test case for state //.1//.1//.1//.1//.1.2//.1.3//.1.4[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R13} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_this); // {R12} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R14} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1.3//.1.4 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test530() {
        //test case for state //.1//.1//.1//.1//.1.2//.1.3//.1.5[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R13} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_this); // {R12} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "previous")); // {R14} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1.3//.1.5 trace is safe.
    @Test
    public void test531() {
        //test case for state //.1//.1//.1//.1//.1.2//.1.3.2//.1[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R13} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_dll); // {R12} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R14} == Object[6] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1.3.2//.1 trace is safe.
    @Test
    public void test532() {
        //test case for state //.1//.1//.1//.1//.1.2//.1.3.2.2[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R13} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_dll); // {R12} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R14} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1.3.2.2 trace is safe.
    @Test
    public void test533() {
        //test case for state //.1//.1//.1//.1//.1.2//.1.3.2.3[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R13} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_dll); // {R12} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R14} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1.3.2.3 trace is safe.
    @Test
    public void test534() {
        //test case for state //.1//.1//.1//.1//.1.2//.1.3.2.4[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R13} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_dll); // {R12} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R14} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1.3.2.4 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test535() {
        //test case for state //.1//.1//.1//.1//.1.2//.1.3.2.5[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R13} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_dll); // {R12} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "previous")); // {R14} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1.3.2.5 trace is safe.
    @Test
    public void test536() {
        //test case for state //.1//.1//.1//.1//.1.2//.1.3.3//.1[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R13} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "element")); // {R12} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R14} == Object[6] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1.3.3//.1 trace is safe.
    @Test
    public void test537() {
        //test case for state //.1//.1//.1//.1//.1.2//.1.3.3.2[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R13} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "element")); // {R12} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R14} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1.3.3.2 trace is safe.
    @Test
    public void test538() {
        //test case for state //.1//.1//.1//.1//.1.2//.1.3.3.3[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R13} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "element")); // {R12} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R14} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1.3.3.3 trace is safe.
    @Test
    public void test539() {
        //test case for state //.1//.1//.1//.1//.1.2//.1.3.3.4[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R13} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "element")); // {R12} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R14} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1.3.3.4 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test540() {
        //test case for state //.1//.1//.1//.1//.1.2//.1.3.3.5[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R13} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "element")); // {R12} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "previous")); // {R14} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1.3.3.5 trace is safe.
//.1//.1//.1//.1//.1.2//.1.4//.1 {ROOT}:dll.header.next.element not expanded. It may be a hint of too strong user-defined constraints, possibly correct when enforcing redundancy by representation invariant.
    @Test
    public void test541() {
        //test case for state //.1//.1//.1//.1//.1.2//.1.4//.1//.1[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R13} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_this); // {R12} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R14} == Object[6] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1.4//.1//.1 trace is safe.
    @Test
    public void test542() {
        //test case for state //.1//.1//.1//.1//.1.2//.1.4//.1.2[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R13} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_this); // {R12} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R14} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1.4//.1.2 trace is safe.
    @Test
    public void test543() {
        //test case for state //.1//.1//.1//.1//.1.2//.1.4//.1.3[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R13} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_this); // {R12} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R14} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1.4//.1.3 trace is safe.
    @Test
    public void test544() {
        //test case for state //.1//.1//.1//.1//.1.2//.1.4//.1.4[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R13} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_this); // {R12} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R14} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1.4//.1.4 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test545() {
        //test case for state //.1//.1//.1//.1//.1.2//.1.4//.1.5[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R13} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_this); // {R12} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "previous")); // {R14} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1.4//.1.5 trace is safe.
    @Test
    public void test546() {
        //test case for state //.1//.1//.1//.1//.1.2//.1.4.2//.1[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R13} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_dll); // {R12} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R14} == Object[6] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1.4.2//.1 trace is safe.
    @Test
    public void test547() {
        //test case for state //.1//.1//.1//.1//.1.2//.1.4.2.2[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R13} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_dll); // {R12} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R14} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1.4.2.2 trace is safe.
    @Test
    public void test548() {
        //test case for state //.1//.1//.1//.1//.1.2//.1.4.2.3[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R13} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_dll); // {R12} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R14} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1.4.2.3 trace is safe.
    @Test
    public void test549() {
        //test case for state //.1//.1//.1//.1//.1.2//.1.4.2.4[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R13} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_dll); // {R12} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R14} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1.4.2.4 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test550() {
        //test case for state //.1//.1//.1//.1//.1.2//.1.4.2.5[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R13} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_dll); // {R12} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "previous")); // {R14} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1.4.2.5 trace is safe.
    @Test
    public void test551() {
        //test case for state //.1//.1//.1//.1//.1.2//.1.4.3//.1[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R13} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "element")); // {R12} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R14} == Object[6] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1.4.3//.1 trace is safe.
    @Test
    public void test552() {
        //test case for state //.1//.1//.1//.1//.1.2//.1.4.3.2[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R13} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "element")); // {R12} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R14} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1.4.3.2 trace is safe.
    @Test
    public void test553() {
        //test case for state //.1//.1//.1//.1//.1.2//.1.4.3.3[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R13} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "element")); // {R12} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R14} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1.4.3.3 trace is safe.
    @Test
    public void test554() {
        //test case for state //.1//.1//.1//.1//.1.2//.1.4.3.4[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R13} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "element")); // {R12} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R14} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1.4.3.4 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test555() {
        //test case for state //.1//.1//.1//.1//.1.2//.1.4.3.5[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R13} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "element")); // {R12} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "previous")); // {R14} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1.4.3.5 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test556() {
        //test case for state //.1//.1//.1//.1//.1.2//.1.5[7]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "next")); // {R13} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2//.1.5 trace is safe.
    @Test(expected=java.util.NoSuchElementException.class)
    public void test557() {
        //test case for state //.1//.1//.1//.1//.1.2.2[80]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R5} == Object[2] (aliases {ROOT}:dll.header)
        ; // pre_init(java/util/NoSuchElementException)
        ; // pre_init(java/lang/RuntimeException)
        ; // pre_init(java/lang/Exception)
        ; // pre_init(java/lang/Throwable)
        ; // !pre_init(java/lang/String)
        ; // !pre_init(java/lang/String$CaseInsensitiveComparator)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2.2 trace is safe.
    @Test
    public void test558() {
        //test case for state //.1//.1//.1//.1//.1.2.3[85]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R5} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2.3 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test559() {
        //test case for state //.1//.1//.1//.1//.1.2.4[7]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").getValue(), "next")); // {R5} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1//.1.2.4 trace is safe.
    @Test(expected=java.lang.IndexOutOfBoundsException.class)
    public void test560() {
        //test case for state //.1//.1//.1//.1.2//.1[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R6} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).set("size", 0);  // 4 >= {V3} + 1
        ; // pre_init(java/lang/IndexOutOfBoundsException)
        ; // pre_init(java/lang/RuntimeException)
        ; // pre_init(java/lang/Exception)
        ; // pre_init(java/lang/Throwable)
        ; // !pre_init(java/lang/String)
        ; // !pre_init(java/lang/String$CaseInsensitiveComparator)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1.2//.1 trace is safe.
    @Test
    public void test561() {
        //test case for state //.1//.1//.1//.1.2.2[96]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R6} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1.2.2 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test562() {
        //test case for state //.1//.1//.1//.1.3[23]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").getValue(), "previous")); // {R6} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1//.1.3 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test563() {
        //test case for state //.1//.1//.1.2[7]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).set("header", null);this.nullObjectFields.add(new ObjectField(__ROOT_dll, "header")); // {R3} == null
        ; // pre_init(common/LinkedList$Entry)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1//.1.2 trace is safe.
    @Test(expected=java.lang.IndexOutOfBoundsException.class)
    public void test564() {
        //test case for state //.1//.1.2//.1//.1//.1[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 0);  // 4 >= {V3} + 1
        ; // pre_init(java/lang/IndexOutOfBoundsException)
        ; // pre_init(java/lang/RuntimeException)
        ; // pre_init(java/lang/Exception)
        ; // pre_init(java/lang/Throwable)
        ; // !pre_init(java/lang/String)
        ; // !pre_init(java/lang/String$CaseInsensitiveComparator)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1//.1 trace is safe.
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1 {ROOT}:dll.header.next.next.next.next.next.element not expanded. It may be a hint of too strong user-defined constraints, possibly correct when enforcing redundancy by representation invariant.
    @Test
    public void test565() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1//.1//.1[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R30} == Object[10] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R29} == Object[11] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1//.1//.1 trace is safe.
    @Test
    public void test566() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1//.1.2[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R30} == Object[10] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R29} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1//.1.2 trace is safe.
    @Test
    public void test567() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1//.1.3[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R30} == Object[10] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R29} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1//.1.3 trace is safe.
    @Test
    public void test568() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1//.1.4[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R30} == Object[10] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R29} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1//.1.4 trace is safe.
    @Test
    public void test569() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1//.1.5[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R30} == Object[10] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R29} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1//.1.5 trace is safe.
    @Test
    public void test570() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1//.1.6[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R30} == Object[10] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R29} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1//.1.6 trace is safe.
    @Test
    public void test571() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1//.1.7[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R30} == Object[10] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1//.1.7 trace is safe.
    @Test
    public void test572() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1//.1.8[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R30} == Object[10] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1//.1.8 trace is safe.
    @Test
    public void test573() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1//.1.9[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R30} == Object[10] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").get("previous").getValue()); // {R29} == Object[10] (aliases {ROOT}:dll.header.next.next.next.next.next.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1//.1.9 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test574() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1//.1//.10[6]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R30} == Object[10] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "next")); // {R29} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1//.1//.10 trace is safe.
    @Test
    public void test575() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.2//.1[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R30} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R29} == Object[10] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.2//.1 trace is safe.
    @Test
    public void test576() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.2.2[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R30} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R29} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.2.2 trace is safe.
    @Test
    public void test577() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.2.3[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R30} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R29} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.2.3 trace is safe.
    @Test
    public void test578() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.2.4[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R30} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R29} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.2.4 trace is safe.
    @Test
    public void test579() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.2.5[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R30} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R29} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.2.5 trace is safe.
    @Test
    public void test580() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.2.6[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R30} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R29} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.2.6 trace is safe.
    @Test
    public void test581() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.2.7[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R30} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.2.7 trace is safe.
    @Test
    public void test582() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.2.8[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R30} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.2.8 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test583() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.2.9[6]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R30} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "next")); // {R29} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.2.9 trace is safe.
    @Test
    public void test584() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.3//.1[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R30} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R29} == Object[10] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.3//.1 trace is safe.
    @Test
    public void test585() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.3.2[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R30} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R29} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.3.2 trace is safe.
    @Test
    public void test586() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.3.3[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R30} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R29} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.3.3 trace is safe.
    @Test
    public void test587() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.3.4[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R30} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R29} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.3.4 trace is safe.
    @Test
    public void test588() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.3.5[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R30} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R29} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.3.5 trace is safe.
    @Test
    public void test589() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.3.6[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R30} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R29} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.3.6 trace is safe.
    @Test
    public void test590() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.3.7[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R30} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.3.7 trace is safe.
    @Test
    public void test591() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.3.8[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R30} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.3.8 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test592() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.3.9[6]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R30} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "next")); // {R29} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.3.9 trace is safe.
    @Test
    public void test593() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.4//.1[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R30} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R29} == Object[10] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.4//.1 trace is safe.
    @Test
    public void test594() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.4.2[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R30} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R29} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.4.2 trace is safe.
    @Test
    public void test595() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.4.3[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R30} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R29} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.4.3 trace is safe.
    @Test
    public void test596() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.4.4[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R30} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R29} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.4.4 trace is safe.
    @Test
    public void test597() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.4.5[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R30} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R29} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.4.5 trace is safe.
    @Test
    public void test598() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.4.6[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R30} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R29} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.4.6 trace is safe.
    @Test
    public void test599() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.4.7[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R30} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.4.7 trace is safe.
    @Test
    public void test600() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.4.8[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R30} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.4.8 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test601() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.4.9[6]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R30} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "next")); // {R29} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.4.9 trace is safe.
    @Test
    public void test602() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.5//.1[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R30} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R29} == Object[10] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.5//.1 trace is safe.
    @Test
    public void test603() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.5.2[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R30} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R29} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.5.2 trace is safe.
    @Test
    public void test604() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.5.3[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R30} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R29} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.5.3 trace is safe.
    @Test
    public void test605() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.5.4[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R30} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R29} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.5.4 trace is safe.
    @Test
    public void test606() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.5.5[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R30} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R29} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.5.5 trace is safe.
    @Test
    public void test607() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.5.6[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R30} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R29} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.5.6 trace is safe.
    @Test
    public void test608() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.5.7[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R30} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.5.7 trace is safe.
    @Test
    public void test609() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.5.8[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R30} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.5.8 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test610() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.5.9[6]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R30} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "next")); // {R29} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.5.9 trace is safe.
    @Test
    public void test611() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.6//.1[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R30} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R29} == Object[10] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.6//.1 trace is safe.
    @Test
    public void test612() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.6.2[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R30} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R29} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.6.2 trace is safe.
    @Test
    public void test613() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.6.3[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R30} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R29} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.6.3 trace is safe.
    @Test
    public void test614() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.6.4[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R30} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R29} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.6.4 trace is safe.
    @Test
    public void test615() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.6.5[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R30} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R29} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.6.5 trace is safe.
    @Test
    public void test616() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.6.6[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R30} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R29} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.6.6 trace is safe.
    @Test
    public void test617() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.6.7[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R30} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.6.7 trace is safe.
    @Test
    public void test618() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.6.8[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R30} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.6.8 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test619() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.6.9[6]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R30} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "next")); // {R29} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.6.9 trace is safe.
    @Test
    public void test620() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.7//.1[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R29} == Object[10] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.7//.1 trace is safe.
    @Test
    public void test621() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.7.2[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R29} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.7.2 trace is safe.
    @Test
    public void test622() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.7.3[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R29} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.7.3 trace is safe.
    @Test
    public void test623() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.7.4[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R29} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.7.4 trace is safe.
    @Test
    public void test624() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.7.5[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R29} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.7.5 trace is safe.
    @Test
    public void test625() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.7.6[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R29} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.7.6 trace is safe.
    @Test
    public void test626() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.7.7[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.7.7 trace is safe.
    @Test
    public void test627() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.7.8[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.7.8 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test628() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.7.9[6]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "next")); // {R29} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.7.9 trace is safe.
    @Test
    public void test629() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.8//.1[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R29} == Object[10] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.8//.1 trace is safe.
    @Test
    public void test630() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.8.2[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R29} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.8.2 trace is safe.
    @Test
    public void test631() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.8.3[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R29} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.8.3 trace is safe.
    @Test
    public void test632() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.8.4[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R29} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.8.4 trace is safe.
    @Test
    public void test633() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.8.5[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R29} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.8.5 trace is safe.
    @Test
    public void test634() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.8.6[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R29} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.8.6 trace is safe.
    @Test
    public void test635() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.8.7[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.8.7 trace is safe.
    @Test
    public void test636() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.8.8[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.8.8 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test637() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.8.9[6]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "next")); // {R29} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.8.9 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test638() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.9//.1[1]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "previous")); // {R30} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R29} == Object[10] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.9//.1 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test639() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.9.2[1]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "previous")); // {R30} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R29} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.9.2 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test640() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.9.3[1]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "previous")); // {R30} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R29} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.9.3 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test641() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.9.4[1]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "previous")); // {R30} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R29} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.9.4 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test642() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.9.5[1]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "previous")); // {R30} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R29} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.9.5 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test643() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.9.6[1]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "previous")); // {R30} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R29} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.9.6 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test644() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.9.7[1]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "previous")); // {R30} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.9.7 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test645() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.9.8[1]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "previous")); // {R30} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.9.8 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test646() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.9.9[1]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "previous")); // {R30} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "next")); // {R29} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1//.1.9.9 trace is safe.
    @Test
    public void test647() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2//.1//.1[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R30} == Object[10] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R29} == Object[11] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2//.1//.1 trace is safe.
    @Test
    public void test648() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2//.1.2[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R30} == Object[10] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R29} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2//.1.2 trace is safe.
    @Test
    public void test649() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2//.1.3[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R30} == Object[10] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R29} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2//.1.3 trace is safe.
    @Test
    public void test650() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2//.1.4[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R30} == Object[10] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R29} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2//.1.4 trace is safe.
    @Test
    public void test651() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2//.1.5[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R30} == Object[10] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R29} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2//.1.5 trace is safe.
    @Test
    public void test652() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2//.1.6[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R30} == Object[10] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R29} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2//.1.6 trace is safe.
    @Test
    public void test653() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2//.1.7[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R30} == Object[10] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2//.1.7 trace is safe.
    @Test
    public void test654() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2//.1.8[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R30} == Object[10] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2//.1.8 trace is safe.
    @Test
    public void test655() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2//.1.9[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R30} == Object[10] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").get("previous").getValue()); // {R29} == Object[10] (aliases {ROOT}:dll.header.next.next.next.next.next.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2//.1.9 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test656() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2//.1//.10[6]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R30} == Object[10] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "next")); // {R29} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2//.1//.10 trace is safe.
    @Test
    public void test657() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.2//.1[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R30} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R29} == Object[10] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.2//.1 trace is safe.
    @Test
    public void test658() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.2.2[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R30} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R29} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.2.2 trace is safe.
    @Test
    public void test659() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.2.3[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R30} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R29} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.2.3 trace is safe.
    @Test
    public void test660() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.2.4[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R30} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R29} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.2.4 trace is safe.
    @Test
    public void test661() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.2.5[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R30} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R29} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.2.5 trace is safe.
    @Test
    public void test662() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.2.6[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R30} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R29} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.2.6 trace is safe.
    @Test
    public void test663() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.2.7[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R30} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.2.7 trace is safe.
    @Test
    public void test664() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.2.8[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R30} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.2.8 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test665() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.2.9[6]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R30} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "next")); // {R29} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.2.9 trace is safe.
    @Test
    public void test666() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.3//.1[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R30} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R29} == Object[10] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.3//.1 trace is safe.
    @Test
    public void test667() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.3.2[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R30} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R29} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.3.2 trace is safe.
    @Test
    public void test668() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.3.3[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R30} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R29} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.3.3 trace is safe.
    @Test
    public void test669() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.3.4[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R30} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R29} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.3.4 trace is safe.
    @Test
    public void test670() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.3.5[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R30} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R29} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.3.5 trace is safe.
    @Test
    public void test671() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.3.6[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R30} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R29} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.3.6 trace is safe.
    @Test
    public void test672() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.3.7[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R30} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.3.7 trace is safe.
    @Test
    public void test673() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.3.8[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R30} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.3.8 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test674() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.3.9[6]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R30} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "next")); // {R29} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.3.9 trace is safe.
    @Test
    public void test675() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.4//.1[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R30} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R29} == Object[10] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.4//.1 trace is safe.
    @Test
    public void test676() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.4.2[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R30} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R29} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.4.2 trace is safe.
    @Test
    public void test677() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.4.3[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R30} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R29} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.4.3 trace is safe.
    @Test
    public void test678() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.4.4[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R30} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R29} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.4.4 trace is safe.
    @Test
    public void test679() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.4.5[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R30} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R29} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.4.5 trace is safe.
    @Test
    public void test680() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.4.6[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R30} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R29} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.4.6 trace is safe.
    @Test
    public void test681() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.4.7[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R30} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.4.7 trace is safe.
    @Test
    public void test682() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.4.8[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R30} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.4.8 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test683() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.4.9[6]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R30} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "next")); // {R29} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.4.9 trace is safe.
    @Test
    public void test684() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.5//.1[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R30} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R29} == Object[10] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.5//.1 trace is safe.
    @Test
    public void test685() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.5.2[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R30} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R29} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.5.2 trace is safe.
    @Test
    public void test686() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.5.3[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R30} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R29} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.5.3 trace is safe.
    @Test
    public void test687() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.5.4[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R30} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R29} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.5.4 trace is safe.
    @Test
    public void test688() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.5.5[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R30} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R29} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.5.5 trace is safe.
    @Test
    public void test689() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.5.6[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R30} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R29} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.5.6 trace is safe.
    @Test
    public void test690() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.5.7[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R30} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.5.7 trace is safe.
    @Test
    public void test691() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.5.8[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R30} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.5.8 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test692() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.5.9[6]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R30} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "next")); // {R29} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.5.9 trace is safe.
    @Test
    public void test693() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.6//.1[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R30} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R29} == Object[10] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.6//.1 trace is safe.
    @Test
    public void test694() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.6.2[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R30} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R29} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.6.2 trace is safe.
    @Test
    public void test695() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.6.3[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R30} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R29} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.6.3 trace is safe.
    @Test
    public void test696() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.6.4[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R30} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R29} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.6.4 trace is safe.
    @Test
    public void test697() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.6.5[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R30} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R29} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.6.5 trace is safe.
    @Test
    public void test698() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.6.6[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R30} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R29} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.6.6 trace is safe.
    @Test
    public void test699() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.6.7[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R30} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.6.7 trace is safe.
    @Test
    public void test700() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.6.8[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R30} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.6.8 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test701() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.6.9[6]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R30} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "next")); // {R29} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.6.9 trace is safe.
    @Test
    public void test702() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.7//.1[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R29} == Object[10] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.7//.1 trace is safe.
    @Test
    public void test703() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.7.2[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R29} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.7.2 trace is safe.
    @Test
    public void test704() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.7.3[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R29} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.7.3 trace is safe.
    @Test
    public void test705() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.7.4[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R29} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.7.4 trace is safe.
    @Test
    public void test706() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.7.5[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R29} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.7.5 trace is safe.
    @Test
    public void test707() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.7.6[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R29} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.7.6 trace is safe.
    @Test
    public void test708() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.7.7[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.7.7 trace is safe.
    @Test
    public void test709() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.7.8[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.7.8 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test710() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.7.9[6]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "next")); // {R29} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.7.9 trace is safe.
    @Test
    public void test711() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.8//.1[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R29} == Object[10] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.8//.1 trace is safe.
    @Test
    public void test712() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.8.2[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R29} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.8.2 trace is safe.
    @Test
    public void test713() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.8.3[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R29} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.8.3 trace is safe.
    @Test
    public void test714() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.8.4[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R29} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.8.4 trace is safe.
    @Test
    public void test715() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.8.5[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R29} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.8.5 trace is safe.
    @Test
    public void test716() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.8.6[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R29} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.8.6 trace is safe.
    @Test
    public void test717() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.8.7[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.8.7 trace is safe.
    @Test
    public void test718() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.8.8[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.8.8 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test719() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.8.9[6]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "next")); // {R29} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.8.9 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test720() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.9//.1[1]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "previous")); // {R30} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R29} == Object[10] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.9//.1 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test721() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.9.2[1]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "previous")); // {R30} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R29} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.9.2 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test722() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.9.3[1]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "previous")); // {R30} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R29} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.9.3 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test723() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.9.4[1]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "previous")); // {R30} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R29} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.9.4 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test724() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.9.5[1]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "previous")); // {R30} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R29} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.9.5 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test725() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.9.6[1]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "previous")); // {R30} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R29} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.9.6 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test726() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.9.7[1]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "previous")); // {R30} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.9.7 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test727() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.9.8[1]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "previous")); // {R30} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.9.8 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test728() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.9.9[1]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "previous")); // {R30} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "next")); // {R29} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.2.9.9 trace is safe.
    @Test
    public void test729() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3//.1//.1[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R30} == Object[10] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R29} == Object[11] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3//.1//.1 trace is safe.
    @Test
    public void test730() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3//.1.2[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R30} == Object[10] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R29} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3//.1.2 trace is safe.
    @Test
    public void test731() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3//.1.3[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R30} == Object[10] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R29} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3//.1.3 trace is safe.
    @Test
    public void test732() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3//.1.4[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R30} == Object[10] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R29} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3//.1.4 trace is safe.
    @Test
    public void test733() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3//.1.5[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R30} == Object[10] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R29} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3//.1.5 trace is safe.
    @Test
    public void test734() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3//.1.6[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R30} == Object[10] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R29} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3//.1.6 trace is safe.
    @Test
    public void test735() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3//.1.7[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R30} == Object[10] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3//.1.7 trace is safe.
    @Test
    public void test736() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3//.1.8[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R30} == Object[10] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3//.1.8 trace is safe.
    @Test
    public void test737() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3//.1.9[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R30} == Object[10] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").get("previous").getValue()); // {R29} == Object[10] (aliases {ROOT}:dll.header.next.next.next.next.next.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3//.1.9 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test738() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3//.1//.10[6]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R30} == Object[10] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "next")); // {R29} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3//.1//.10 trace is safe.
    @Test
    public void test739() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.2//.1[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R30} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R29} == Object[10] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.2//.1 trace is safe.
    @Test
    public void test740() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.2.2[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R30} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R29} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.2.2 trace is safe.
    @Test
    public void test741() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.2.3[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R30} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R29} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.2.3 trace is safe.
    @Test
    public void test742() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.2.4[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R30} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R29} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.2.4 trace is safe.
    @Test
    public void test743() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.2.5[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R30} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R29} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.2.5 trace is safe.
    @Test
    public void test744() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.2.6[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R30} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R29} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.2.6 trace is safe.
    @Test
    public void test745() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.2.7[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R30} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.2.7 trace is safe.
    @Test
    public void test746() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.2.8[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R30} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.2.8 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test747() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.2.9[6]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R30} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "next")); // {R29} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.2.9 trace is safe.
    @Test
    public void test748() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.3//.1[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R30} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R29} == Object[10] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.3//.1 trace is safe.
    @Test
    public void test749() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.3.2[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R30} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R29} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.3.2 trace is safe.
    @Test
    public void test750() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.3.3[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R30} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R29} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.3.3 trace is safe.
    @Test
    public void test751() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.3.4[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R30} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R29} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.3.4 trace is safe.
    @Test
    public void test752() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.3.5[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R30} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R29} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.3.5 trace is safe.
    @Test
    public void test753() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.3.6[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R30} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R29} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.3.6 trace is safe.
    @Test
    public void test754() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.3.7[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R30} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.3.7 trace is safe.
    @Test
    public void test755() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.3.8[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R30} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.3.8 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test756() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.3.9[6]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R30} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "next")); // {R29} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.3.9 trace is safe.
    @Test
    public void test757() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.4//.1[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R30} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R29} == Object[10] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.4//.1 trace is safe.
    @Test
    public void test758() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.4.2[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R30} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R29} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.4.2 trace is safe.
    @Test
    public void test759() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.4.3[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R30} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R29} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.4.3 trace is safe.
    @Test
    public void test760() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.4.4[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R30} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R29} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.4.4 trace is safe.
    @Test
    public void test761() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.4.5[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R30} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R29} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.4.5 trace is safe.
    @Test
    public void test762() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.4.6[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R30} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R29} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.4.6 trace is safe.
    @Test
    public void test763() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.4.7[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R30} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.4.7 trace is safe.
    @Test
    public void test764() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.4.8[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R30} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.4.8 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test765() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.4.9[6]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R30} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "next")); // {R29} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.4.9 trace is safe.
    @Test
    public void test766() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.5//.1[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R30} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R29} == Object[10] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.5//.1 trace is safe.
    @Test
    public void test767() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.5.2[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R30} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R29} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.5.2 trace is safe.
    @Test
    public void test768() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.5.3[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R30} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R29} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.5.3 trace is safe.
    @Test
    public void test769() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.5.4[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R30} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R29} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.5.4 trace is safe.
    @Test
    public void test770() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.5.5[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R30} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R29} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.5.5 trace is safe.
    @Test
    public void test771() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.5.6[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R30} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R29} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.5.6 trace is safe.
    @Test
    public void test772() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.5.7[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R30} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.5.7 trace is safe.
    @Test
    public void test773() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.5.8[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R30} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.5.8 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test774() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.5.9[6]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R30} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "next")); // {R29} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.5.9 trace is safe.
    @Test
    public void test775() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.6//.1[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R30} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R29} == Object[10] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.6//.1 trace is safe.
    @Test
    public void test776() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.6.2[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R30} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R29} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.6.2 trace is safe.
    @Test
    public void test777() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.6.3[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R30} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R29} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.6.3 trace is safe.
    @Test
    public void test778() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.6.4[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R30} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R29} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.6.4 trace is safe.
    @Test
    public void test779() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.6.5[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R30} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R29} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.6.5 trace is safe.
    @Test
    public void test780() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.6.6[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R30} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R29} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.6.6 trace is safe.
    @Test
    public void test781() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.6.7[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R30} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.6.7 trace is safe.
    @Test
    public void test782() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.6.8[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R30} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.6.8 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test783() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.6.9[6]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R30} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "next")); // {R29} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.6.9 trace is safe.
    @Test
    public void test784() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.7//.1[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R29} == Object[10] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.7//.1 trace is safe.
    @Test
    public void test785() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.7.2[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R29} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.7.2 trace is safe.
    @Test
    public void test786() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.7.3[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R29} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.7.3 trace is safe.
    @Test
    public void test787() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.7.4[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R29} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.7.4 trace is safe.
    @Test
    public void test788() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.7.5[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R29} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.7.5 trace is safe.
    @Test
    public void test789() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.7.6[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R29} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.7.6 trace is safe.
    @Test
    public void test790() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.7.7[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.7.7 trace is safe.
    @Test
    public void test791() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.7.8[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.7.8 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test792() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.7.9[6]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "next")); // {R29} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.7.9 trace is safe.
    @Test
    public void test793() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.8//.1[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R29} == Object[10] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.8//.1 trace is safe.
    @Test
    public void test794() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.8.2[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R29} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.8.2 trace is safe.
    @Test
    public void test795() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.8.3[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R29} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.8.3 trace is safe.
    @Test
    public void test796() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.8.4[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R29} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.8.4 trace is safe.
    @Test
    public void test797() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.8.5[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R29} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.8.5 trace is safe.
    @Test
    public void test798() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.8.6[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R29} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.8.6 trace is safe.
    @Test
    public void test799() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.8.7[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.8.7 trace is safe.
    @Test
    public void test800() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.8.8[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.8.8 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test801() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.8.9[6]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "next")); // {R29} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.8.9 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test802() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.9//.1[1]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "previous")); // {R30} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R29} == Object[10] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.9//.1 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test803() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.9.2[1]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "previous")); // {R30} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R29} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.9.2 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test804() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.9.3[1]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "previous")); // {R30} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R29} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.9.3 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test805() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.9.4[1]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "previous")); // {R30} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R29} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.9.4 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test806() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.9.5[1]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "previous")); // {R30} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R29} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.9.5 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test807() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.9.6[1]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "previous")); // {R30} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R29} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.9.6 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test808() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.9.7[1]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "previous")); // {R30} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.9.7 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test809() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.9.8[1]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "previous")); // {R30} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.9.8 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test810() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.9.9[1]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "previous")); // {R30} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "next")); // {R29} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1//.1.3.9.9 trace is safe.
    @Test(expected=java.util.NoSuchElementException.class)
    public void test811() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.2[52]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R25} == Object[2] (aliases {ROOT}:dll.header)
        ; // pre_init(java/util/NoSuchElementException)
        ; // pre_init(java/lang/RuntimeException)
        ; // pre_init(java/lang/Exception)
        ; // pre_init(java/lang/Throwable)
        ; // !pre_init(java/lang/String)
        ; // !pre_init(java/lang/String$CaseInsensitiveComparator)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.2 trace is safe.
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.3//.1 {ROOT}:dll.header.previous.element not expanded. It may be a hint of too strong user-defined constraints, possibly correct when enforcing redundancy by representation invariant.
    @Test
    public void test812() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.3//.1//.1[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R25} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("element", __ROOT_this); // {R8} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("previous", newInstance("common.LinkedList$Entry")); // {R10} == Object[9] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.3//.1//.1 trace is safe.
    @Test
    public void test813() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.3//.1.2[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R25} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("element", __ROOT_this); // {R8} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R10} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.3//.1.2 trace is safe.
    @Test
    public void test814() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.3//.1.3[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R25} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("element", __ROOT_this); // {R8} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R10} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.3//.1.3 trace is safe.
    @Test
    public void test815() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.3//.1.4[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R25} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("element", __ROOT_this); // {R8} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R10} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.3//.1.4 trace is safe.
    @Test
    public void test816() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.3//.1.5[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R25} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("element", __ROOT_this); // {R8} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R10} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.3//.1.5 trace is safe.
    @Test
    public void test817() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.3//.1.6[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R25} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("element", __ROOT_this); // {R8} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R10} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.3//.1.6 trace is safe.
    @Test
    public void test818() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.3//.1.7[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R25} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("element", __ROOT_this); // {R8} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R10} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.3//.1.7 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test819() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.3//.1.8[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R25} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("element", __ROOT_this); // {R8} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue(), "previous")); // {R10} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.3//.1.8 trace is safe.
    @Test
    public void test820() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.3.2//.1[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R25} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("element", __ROOT_dll); // {R8} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("previous", newInstance("common.LinkedList$Entry")); // {R10} == Object[9] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.3.2//.1 trace is safe.
    @Test
    public void test821() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.3.2.2[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R25} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("element", __ROOT_dll); // {R8} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R10} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.3.2.2 trace is safe.
    @Test
    public void test822() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.3.2.3[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R25} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("element", __ROOT_dll); // {R8} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R10} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.3.2.3 trace is safe.
    @Test
    public void test823() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.3.2.4[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R25} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("element", __ROOT_dll); // {R8} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R10} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.3.2.4 trace is safe.
    @Test
    public void test824() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.3.2.5[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R25} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("element", __ROOT_dll); // {R8} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R10} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.3.2.5 trace is safe.
    @Test
    public void test825() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.3.2.6[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R25} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("element", __ROOT_dll); // {R8} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R10} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.3.2.6 trace is safe.
    @Test
    public void test826() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.3.2.7[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R25} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("element", __ROOT_dll); // {R8} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R10} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.3.2.7 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test827() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.3.2.8[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R25} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("element", __ROOT_dll); // {R8} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue(), "previous")); // {R10} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.3.2.8 trace is safe.
    @Test
    public void test828() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.3.3//.1[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R25} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue(), "element")); // {R8} == null
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("previous", newInstance("common.LinkedList$Entry")); // {R10} == Object[9] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.3.3//.1 trace is safe.
    @Test
    public void test829() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.3.3.2[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R25} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue(), "element")); // {R8} == null
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R10} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.3.3.2 trace is safe.
    @Test
    public void test830() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.3.3.3[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R25} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue(), "element")); // {R8} == null
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R10} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.3.3.3 trace is safe.
    @Test
    public void test831() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.3.3.4[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R25} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue(), "element")); // {R8} == null
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R10} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.3.3.4 trace is safe.
    @Test
    public void test832() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.3.3.5[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R25} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue(), "element")); // {R8} == null
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R10} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.3.3.5 trace is safe.
    @Test
    public void test833() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.3.3.6[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R25} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue(), "element")); // {R8} == null
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R10} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.3.3.6 trace is safe.
    @Test
    public void test834() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.3.3.7[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R25} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue(), "element")); // {R8} == null
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R10} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.3.3.7 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test835() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.3.3.8[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R25} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue(), "element")); // {R8} == null
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue(), "previous")); // {R10} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.3.3.8 trace is safe.
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.4//.1 {ROOT}:dll.header.next.element not expanded. It may be a hint of too strong user-defined constraints, possibly correct when enforcing redundancy by representation invariant.
    @Test
    public void test836() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.4//.1//.1[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R25} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_this); // {R12} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R14} == Object[9] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.4//.1//.1 trace is safe.
    @Test
    public void test837() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.4//.1.2[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R25} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_this); // {R12} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R14} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.4//.1.2 trace is safe.
    @Test
    public void test838() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.4//.1.3[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R25} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_this); // {R12} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R14} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.4//.1.3 trace is safe.
    @Test
    public void test839() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.4//.1.4[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R25} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_this); // {R12} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R14} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.4//.1.4 trace is safe.
    @Test
    public void test840() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.4//.1.5[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R25} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_this); // {R12} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R14} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.4//.1.5 trace is safe.
    @Test
    public void test841() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.4//.1.6[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R25} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_this); // {R12} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R14} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.4//.1.6 trace is safe.
    @Test
    public void test842() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.4//.1.7[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R25} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_this); // {R12} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R14} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.4//.1.7 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test843() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.4//.1.8[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R25} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_this); // {R12} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "previous")); // {R14} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.4//.1.8 trace is safe.
    @Test
    public void test844() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.4.2//.1[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R25} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_dll); // {R12} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R14} == Object[9] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.4.2//.1 trace is safe.
    @Test
    public void test845() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.4.2.2[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R25} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_dll); // {R12} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R14} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.4.2.2 trace is safe.
    @Test
    public void test846() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.4.2.3[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R25} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_dll); // {R12} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R14} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.4.2.3 trace is safe.
    @Test
    public void test847() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.4.2.4[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R25} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_dll); // {R12} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R14} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.4.2.4 trace is safe.
    @Test
    public void test848() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.4.2.5[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R25} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_dll); // {R12} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R14} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.4.2.5 trace is safe.
    @Test
    public void test849() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.4.2.6[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R25} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_dll); // {R12} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R14} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.4.2.6 trace is safe.
    @Test
    public void test850() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.4.2.7[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R25} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_dll); // {R12} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R14} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.4.2.7 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test851() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.4.2.8[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R25} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_dll); // {R12} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "previous")); // {R14} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.4.2.8 trace is safe.
    @Test
    public void test852() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.4.3//.1[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R25} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "element")); // {R12} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R14} == Object[9] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.4.3//.1 trace is safe.
    @Test
    public void test853() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.4.3.2[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R25} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "element")); // {R12} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R14} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.4.3.2 trace is safe.
    @Test
    public void test854() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.4.3.3[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R25} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "element")); // {R12} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R14} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.4.3.3 trace is safe.
    @Test
    public void test855() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.4.3.4[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R25} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "element")); // {R12} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R14} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.4.3.4 trace is safe.
    @Test
    public void test856() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.4.3.5[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R25} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "element")); // {R12} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R14} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.4.3.5 trace is safe.
    @Test
    public void test857() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.4.3.6[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R25} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "element")); // {R12} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R14} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.4.3.6 trace is safe.
    @Test
    public void test858() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.4.3.7[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R25} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "element")); // {R12} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R14} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.4.3.7 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test859() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.4.3.8[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R25} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "element")); // {R12} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "previous")); // {R14} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.4.3.8 trace is safe.
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.5//.1 {ROOT}:dll.header.next.next.element not expanded. It may be a hint of too strong user-defined constraints, possibly correct when enforcing redundancy by representation invariant.
    @Test
    public void test860() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.5//.1//.1[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R25} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_this); // {R16} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R18} == Object[9] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.5//.1//.1 trace is safe.
    @Test
    public void test861() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.5//.1.2[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R25} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_this); // {R16} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R18} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.5//.1.2 trace is safe.
    @Test
    public void test862() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.5//.1.3[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R25} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_this); // {R16} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R18} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.5//.1.3 trace is safe.
    @Test
    public void test863() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.5//.1.4[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R25} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_this); // {R16} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R18} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.5//.1.4 trace is safe.
    @Test
    public void test864() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.5//.1.5[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R25} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_this); // {R16} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R18} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.5//.1.5 trace is safe.
    @Test
    public void test865() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.5//.1.6[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R25} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_this); // {R16} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R18} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.5//.1.6 trace is safe.
    @Test
    public void test866() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.5//.1.7[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R25} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_this); // {R16} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R18} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.5//.1.7 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test867() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.5//.1.8[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R25} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_this); // {R16} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "previous")); // {R18} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.5//.1.8 trace is safe.
    @Test
    public void test868() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.5.2//.1[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R25} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_dll); // {R16} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R18} == Object[9] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.5.2//.1 trace is safe.
    @Test
    public void test869() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.5.2.2[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R25} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_dll); // {R16} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R18} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.5.2.2 trace is safe.
    @Test
    public void test870() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.5.2.3[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R25} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_dll); // {R16} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R18} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.5.2.3 trace is safe.
    @Test
    public void test871() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.5.2.4[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R25} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_dll); // {R16} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R18} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.5.2.4 trace is safe.
    @Test
    public void test872() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.5.2.5[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R25} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_dll); // {R16} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R18} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.5.2.5 trace is safe.
    @Test
    public void test873() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.5.2.6[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R25} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_dll); // {R16} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R18} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.5.2.6 trace is safe.
    @Test
    public void test874() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.5.2.7[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R25} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_dll); // {R16} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R18} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.5.2.7 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test875() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.5.2.8[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R25} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_dll); // {R16} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "previous")); // {R18} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.5.2.8 trace is safe.
    @Test
    public void test876() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.5.3//.1[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R25} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "element")); // {R16} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R18} == Object[9] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.5.3//.1 trace is safe.
    @Test
    public void test877() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.5.3.2[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R25} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "element")); // {R16} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R18} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.5.3.2 trace is safe.
    @Test
    public void test878() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.5.3.3[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R25} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "element")); // {R16} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R18} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.5.3.3 trace is safe.
    @Test
    public void test879() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.5.3.4[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R25} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "element")); // {R16} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R18} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.5.3.4 trace is safe.
    @Test
    public void test880() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.5.3.5[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R25} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "element")); // {R16} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R18} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.5.3.5 trace is safe.
    @Test
    public void test881() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.5.3.6[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R25} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "element")); // {R16} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R18} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.5.3.6 trace is safe.
    @Test
    public void test882() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.5.3.7[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R25} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "element")); // {R16} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R18} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.5.3.7 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test883() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.5.3.8[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R25} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "element")); // {R16} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "previous")); // {R18} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.5.3.8 trace is safe.
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.6//.1 {ROOT}:dll.header.next.next.next.element not expanded. It may be a hint of too strong user-defined constraints, possibly correct when enforcing redundancy by representation invariant.
    @Test
    public void test884() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.6//.1//.1[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R25} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_this); // {R20} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R22} == Object[9] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.6//.1//.1 trace is safe.
    @Test
    public void test885() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.6//.1.2[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R25} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_this); // {R20} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R22} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.6//.1.2 trace is safe.
    @Test
    public void test886() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.6//.1.3[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R25} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_this); // {R20} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R22} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.6//.1.3 trace is safe.
    @Test
    public void test887() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.6//.1.4[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R25} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_this); // {R20} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R22} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.6//.1.4 trace is safe.
    @Test
    public void test888() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.6//.1.5[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R25} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_this); // {R20} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R22} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.6//.1.5 trace is safe.
    @Test
    public void test889() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.6//.1.6[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R25} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_this); // {R20} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R22} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.6//.1.6 trace is safe.
    @Test
    public void test890() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.6//.1.7[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R25} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_this); // {R20} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R22} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.6//.1.7 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test891() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.6//.1.8[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R25} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_this); // {R20} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue(), "previous")); // {R22} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.6//.1.8 trace is safe.
    @Test
    public void test892() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.6.2//.1[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R25} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_dll); // {R20} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R22} == Object[9] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.6.2//.1 trace is safe.
    @Test
    public void test893() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.6.2.2[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R25} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_dll); // {R20} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R22} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.6.2.2 trace is safe.
    @Test
    public void test894() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.6.2.3[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R25} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_dll); // {R20} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R22} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.6.2.3 trace is safe.
    @Test
    public void test895() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.6.2.4[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R25} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_dll); // {R20} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R22} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.6.2.4 trace is safe.
    @Test
    public void test896() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.6.2.5[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R25} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_dll); // {R20} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R22} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.6.2.5 trace is safe.
    @Test
    public void test897() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.6.2.6[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R25} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_dll); // {R20} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R22} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.6.2.6 trace is safe.
    @Test
    public void test898() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.6.2.7[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R25} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_dll); // {R20} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R22} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.6.2.7 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test899() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.6.2.8[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R25} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_dll); // {R20} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue(), "previous")); // {R22} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.6.2.8 trace is safe.
    @Test
    public void test900() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.6.3//.1[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R25} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue(), "element")); // {R20} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R22} == Object[9] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.6.3//.1 trace is safe.
    @Test
    public void test901() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.6.3.2[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R25} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue(), "element")); // {R20} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R22} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.6.3.2 trace is safe.
    @Test
    public void test902() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.6.3.3[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R25} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue(), "element")); // {R20} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R22} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.6.3.3 trace is safe.
    @Test
    public void test903() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.6.3.4[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R25} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue(), "element")); // {R20} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R22} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.6.3.4 trace is safe.
    @Test
    public void test904() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.6.3.5[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R25} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue(), "element")); // {R20} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R22} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.6.3.5 trace is safe.
    @Test
    public void test905() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.6.3.6[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R25} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue(), "element")); // {R20} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R22} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.6.3.6 trace is safe.
    @Test
    public void test906() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.6.3.7[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R25} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue(), "element")); // {R20} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R22} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.6.3.7 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test907() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.6.3.8[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R25} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue(), "element")); // {R20} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue(), "previous")); // {R22} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.6.3.8 trace is safe.
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.7//.1 {ROOT}:dll.header.next.next.next.next.element not expanded. It may be a hint of too strong user-defined constraints, possibly correct when enforcing redundancy by representation invariant.
    @Test
    public void test908() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.7//.1//.1[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R25} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R24} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R26} == Object[9] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.7//.1//.1 trace is safe.
    @Test
    public void test909() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.7//.1.2[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R25} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R24} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R26} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.7//.1.2 trace is safe.
    @Test
    public void test910() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.7//.1.3[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R25} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R24} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R26} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.7//.1.3 trace is safe.
    @Test
    public void test911() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.7//.1.4[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R25} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R24} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R26} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.7//.1.4 trace is safe.
    @Test
    public void test912() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.7//.1.5[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R25} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R24} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R26} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.7//.1.5 trace is safe.
    @Test
    public void test913() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.7//.1.6[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R25} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R24} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R26} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.7//.1.6 trace is safe.
    @Test
    public void test914() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.7//.1.7[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R25} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R24} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R26} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.7//.1.7 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test915() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.7//.1.8[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R25} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R24} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue(), "previous")); // {R26} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.7//.1.8 trace is safe.
    @Test
    public void test916() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.7.2//.1[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R25} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R24} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R26} == Object[9] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.7.2//.1 trace is safe.
    @Test
    public void test917() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.7.2.2[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R25} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R24} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R26} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.7.2.2 trace is safe.
    @Test
    public void test918() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.7.2.3[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R25} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R24} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R26} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.7.2.3 trace is safe.
    @Test
    public void test919() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.7.2.4[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R25} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R24} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R26} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.7.2.4 trace is safe.
    @Test
    public void test920() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.7.2.5[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R25} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R24} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R26} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.7.2.5 trace is safe.
    @Test
    public void test921() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.7.2.6[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R25} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R24} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R26} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.7.2.6 trace is safe.
    @Test
    public void test922() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.7.2.7[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R25} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R24} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R26} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.7.2.7 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test923() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.7.2.8[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R25} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R24} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue(), "previous")); // {R26} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.7.2.8 trace is safe.
    @Test
    public void test924() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.7.3//.1[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R25} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue(), "element")); // {R24} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R26} == Object[9] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.7.3//.1 trace is safe.
    @Test
    public void test925() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.7.3.2[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R25} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue(), "element")); // {R24} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R26} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.7.3.2 trace is safe.
    @Test
    public void test926() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.7.3.3[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R25} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue(), "element")); // {R24} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R26} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.7.3.3 trace is safe.
    @Test
    public void test927() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.7.3.4[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R25} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue(), "element")); // {R24} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R26} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.7.3.4 trace is safe.
    @Test
    public void test928() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.7.3.5[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R25} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue(), "element")); // {R24} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R26} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.7.3.5 trace is safe.
    @Test
    public void test929() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.7.3.6[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R25} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue(), "element")); // {R24} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R26} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.7.3.6 trace is safe.
    @Test
    public void test930() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.7.3.7[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R25} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue(), "element")); // {R24} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R26} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.7.3.7 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test931() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.7.3.8[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R25} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue(), "element")); // {R24} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue(), "previous")); // {R26} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.7.3.8 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test932() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1//.1.8[14]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue(), "next")); // {R25} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1//.1.8 trace is safe.
//.1//.1.2//.1//.1.2//.1//.1//.1.2//.1 {ROOT}:dll.header.next.element not expanded. It may be a hint of too strong user-defined constraints, possibly correct when enforcing redundancy by representation invariant.
    @Test
    public void test933() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1.2//.1//.1[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R21} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_this); // {R12} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R14} == Object[8] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1.2//.1//.1 trace is safe.
    @Test
    public void test934() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1.2//.1.2[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R21} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_this); // {R12} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R14} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1.2//.1.2 trace is safe.
    @Test
    public void test935() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1.2//.1.3[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R21} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_this); // {R12} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R14} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1.2//.1.3 trace is safe.
    @Test
    public void test936() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1.2//.1.4[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R21} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_this); // {R12} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R14} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1.2//.1.4 trace is safe.
    @Test
    public void test937() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1.2//.1.5[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R21} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_this); // {R12} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R14} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1.2//.1.5 trace is safe.
    @Test
    public void test938() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1.2//.1.6[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R21} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_this); // {R12} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R14} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1.2//.1.6 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test939() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1.2//.1.7[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R21} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_this); // {R12} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "previous")); // {R14} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1.2//.1.7 trace is safe.
    @Test
    public void test940() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1.2.2//.1[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R21} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_dll); // {R12} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R14} == Object[8] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1.2.2//.1 trace is safe.
    @Test
    public void test941() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1.2.2.2[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R21} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_dll); // {R12} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R14} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1.2.2.2 trace is safe.
    @Test
    public void test942() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1.2.2.3[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R21} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_dll); // {R12} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R14} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1.2.2.3 trace is safe.
    @Test
    public void test943() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1.2.2.4[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R21} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_dll); // {R12} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R14} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1.2.2.4 trace is safe.
    @Test
    public void test944() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1.2.2.5[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R21} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_dll); // {R12} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R14} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1.2.2.5 trace is safe.
    @Test
    public void test945() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1.2.2.6[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R21} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_dll); // {R12} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R14} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1.2.2.6 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test946() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1.2.2.7[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R21} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_dll); // {R12} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "previous")); // {R14} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1.2.2.7 trace is safe.
    @Test
    public void test947() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1.2.3//.1[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R21} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "element")); // {R12} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R14} == Object[8] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1.2.3//.1 trace is safe.
    @Test
    public void test948() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1.2.3.2[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R21} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "element")); // {R12} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R14} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1.2.3.2 trace is safe.
    @Test
    public void test949() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1.2.3.3[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R21} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "element")); // {R12} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R14} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1.2.3.3 trace is safe.
    @Test
    public void test950() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1.2.3.4[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R21} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "element")); // {R12} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R14} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1.2.3.4 trace is safe.
    @Test
    public void test951() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1.2.3.5[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R21} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "element")); // {R12} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R14} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1.2.3.5 trace is safe.
    @Test
    public void test952() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1.2.3.6[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R21} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "element")); // {R12} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R14} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1.2.3.6 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test953() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1.2.3.7[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R21} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "element")); // {R12} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "previous")); // {R14} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1.2.3.7 trace is safe.
    @Test
    public void test954() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1.3[64]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R21} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1.3 trace is safe.
//.1//.1.2//.1//.1.2//.1//.1//.1.4//.1 {ROOT}:dll.header.next.next.element not expanded. It may be a hint of too strong user-defined constraints, possibly correct when enforcing redundancy by representation invariant.
    @Test
    public void test955() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1.4//.1//.1[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R21} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_this); // {R16} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R18} == Object[8] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1.4//.1//.1 trace is safe.
    @Test
    public void test956() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1.4//.1.2[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R21} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_this); // {R16} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R18} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1.4//.1.2 trace is safe.
    @Test
    public void test957() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1.4//.1.3[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R21} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_this); // {R16} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R18} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1.4//.1.3 trace is safe.
    @Test
    public void test958() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1.4//.1.4[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R21} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_this); // {R16} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R18} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1.4//.1.4 trace is safe.
    @Test
    public void test959() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1.4//.1.5[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R21} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_this); // {R16} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R18} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1.4//.1.5 trace is safe.
    @Test
    public void test960() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1.4//.1.6[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R21} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_this); // {R16} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R18} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1.4//.1.6 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test961() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1.4//.1.7[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R21} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_this); // {R16} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "previous")); // {R18} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1.4//.1.7 trace is safe.
    @Test
    public void test962() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1.4.2//.1[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R21} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_dll); // {R16} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R18} == Object[8] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1.4.2//.1 trace is safe.
    @Test
    public void test963() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1.4.2.2[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R21} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_dll); // {R16} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R18} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1.4.2.2 trace is safe.
    @Test
    public void test964() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1.4.2.3[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R21} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_dll); // {R16} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R18} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1.4.2.3 trace is safe.
    @Test
    public void test965() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1.4.2.4[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R21} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_dll); // {R16} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R18} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1.4.2.4 trace is safe.
    @Test
    public void test966() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1.4.2.5[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R21} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_dll); // {R16} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R18} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1.4.2.5 trace is safe.
    @Test
    public void test967() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1.4.2.6[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R21} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_dll); // {R16} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R18} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1.4.2.6 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test968() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1.4.2.7[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R21} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_dll); // {R16} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "previous")); // {R18} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1.4.2.7 trace is safe.
    @Test
    public void test969() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1.4.3//.1[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R21} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "element")); // {R16} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R18} == Object[8] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1.4.3//.1 trace is safe.
    @Test
    public void test970() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1.4.3.2[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R21} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "element")); // {R16} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R18} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1.4.3.2 trace is safe.
    @Test
    public void test971() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1.4.3.3[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R21} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "element")); // {R16} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R18} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1.4.3.3 trace is safe.
    @Test
    public void test972() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1.4.3.4[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R21} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "element")); // {R16} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R18} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1.4.3.4 trace is safe.
    @Test
    public void test973() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1.4.3.5[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R21} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "element")); // {R16} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R18} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1.4.3.5 trace is safe.
    @Test
    public void test974() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1.4.3.6[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R21} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "element")); // {R16} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R18} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1.4.3.6 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test975() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1.4.3.7[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R21} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "element")); // {R16} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "previous")); // {R18} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1.4.3.7 trace is safe.
//.1//.1.2//.1//.1.2//.1//.1//.1.5//.1 {ROOT}:dll.header.next.next.next.element not expanded. It may be a hint of too strong user-defined constraints, possibly correct when enforcing redundancy by representation invariant.
    @Test
    public void test976() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1.5//.1//.1[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R21} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_this); // {R20} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R22} == Object[8] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1.5//.1//.1 trace is safe.
    @Test
    public void test977() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1.5//.1.2[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R21} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_this); // {R20} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R22} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1.5//.1.2 trace is safe.
    @Test
    public void test978() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1.5//.1.3[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R21} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_this); // {R20} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R22} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1.5//.1.3 trace is safe.
    @Test
    public void test979() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1.5//.1.4[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R21} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_this); // {R20} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R22} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1.5//.1.4 trace is safe.
    @Test
    public void test980() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1.5//.1.5[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R21} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_this); // {R20} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R22} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1.5//.1.5 trace is safe.
    @Test
    public void test981() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1.5//.1.6[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R21} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_this); // {R20} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R22} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1.5//.1.6 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test982() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1.5//.1.7[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R21} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_this); // {R20} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue(), "previous")); // {R22} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1.5//.1.7 trace is safe.
    @Test
    public void test983() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1.5.2//.1[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R21} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_dll); // {R20} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R22} == Object[8] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1.5.2//.1 trace is safe.
    @Test
    public void test984() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1.5.2.2[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R21} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_dll); // {R20} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R22} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1.5.2.2 trace is safe.
    @Test
    public void test985() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1.5.2.3[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R21} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_dll); // {R20} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R22} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1.5.2.3 trace is safe.
    @Test
    public void test986() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1.5.2.4[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R21} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_dll); // {R20} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R22} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1.5.2.4 trace is safe.
    @Test
    public void test987() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1.5.2.5[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R21} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_dll); // {R20} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R22} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1.5.2.5 trace is safe.
    @Test
    public void test988() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1.5.2.6[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R21} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_dll); // {R20} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R22} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1.5.2.6 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test989() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1.5.2.7[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R21} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_dll); // {R20} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue(), "previous")); // {R22} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1.5.2.7 trace is safe.
    @Test
    public void test990() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1.5.3//.1[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R21} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue(), "element")); // {R20} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R22} == Object[8] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1.5.3//.1 trace is safe.
    @Test
    public void test991() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1.5.3.2[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R21} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue(), "element")); // {R20} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R22} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1.5.3.2 trace is safe.
    @Test
    public void test992() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1.5.3.3[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R21} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue(), "element")); // {R20} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R22} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1.5.3.3 trace is safe.
    @Test
    public void test993() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1.5.3.4[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R21} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue(), "element")); // {R20} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R22} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1.5.3.4 trace is safe.
    @Test
    public void test994() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1.5.3.5[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R21} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue(), "element")); // {R20} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R22} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1.5.3.5 trace is safe.
    @Test
    public void test995() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1.5.3.6[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R21} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue(), "element")); // {R20} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R22} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1.5.3.6 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test996() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1.5.3.7[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R21} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue(), "element")); // {R20} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue(), "previous")); // {R22} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1.5.3.7 trace is safe.
//.1//.1.2//.1//.1.2//.1//.1//.1.6//.1 {ROOT}:dll.header.next.next.next.element not expanded. It may be a hint of too strong user-defined constraints, possibly correct when enforcing redundancy by representation invariant.
    @Test
    public void test997() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1.6//.1//.1[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R21} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_this); // {R20} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R22} == Object[8] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1.6//.1//.1 trace is safe.
    @Test
    public void test998() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1.6//.1.2[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R21} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_this); // {R20} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R22} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1.6//.1.2 trace is safe.
    @Test
    public void test999() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1.6//.1.3[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R21} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_this); // {R20} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R22} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1.6//.1.3 trace is safe.
    @Test
    public void test1000() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1.6//.1.4[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R21} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_this); // {R20} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R22} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1.6//.1.4 trace is safe.
    @Test
    public void test1001() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1.6//.1.5[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R21} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_this); // {R20} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R22} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1.6//.1.5 trace is safe.
    @Test
    public void test1002() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1.6//.1.6[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R21} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_this); // {R20} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R22} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1.6//.1.6 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1003() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1.6//.1.7[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R21} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_this); // {R20} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue(), "previous")); // {R22} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1.6//.1.7 trace is safe.
    @Test
    public void test1004() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1.6.2//.1[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R21} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_dll); // {R20} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R22} == Object[8] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1.6.2//.1 trace is safe.
    @Test
    public void test1005() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1.6.2.2[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R21} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_dll); // {R20} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R22} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1.6.2.2 trace is safe.
    @Test
    public void test1006() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1.6.2.3[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R21} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_dll); // {R20} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R22} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1.6.2.3 trace is safe.
    @Test
    public void test1007() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1.6.2.4[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R21} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_dll); // {R20} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R22} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1.6.2.4 trace is safe.
    @Test
    public void test1008() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1.6.2.5[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R21} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_dll); // {R20} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R22} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1.6.2.5 trace is safe.
    @Test
    public void test1009() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1.6.2.6[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R21} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_dll); // {R20} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R22} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1.6.2.6 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1010() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1.6.2.7[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R21} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_dll); // {R20} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue(), "previous")); // {R22} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1.6.2.7 trace is safe.
    @Test
    public void test1011() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1.6.3//.1[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R21} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue(), "element")); // {R20} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R22} == Object[8] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1.6.3//.1 trace is safe.
    @Test
    public void test1012() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1.6.3.2[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R21} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue(), "element")); // {R20} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R22} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1.6.3.2 trace is safe.
    @Test
    public void test1013() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1.6.3.3[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R21} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue(), "element")); // {R20} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R22} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1.6.3.3 trace is safe.
    @Test
    public void test1014() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1.6.3.4[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R21} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue(), "element")); // {R20} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R22} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1.6.3.4 trace is safe.
    @Test
    public void test1015() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1.6.3.5[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R21} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue(), "element")); // {R20} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R22} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1.6.3.5 trace is safe.
    @Test
    public void test1016() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1.6.3.6[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R21} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue(), "element")); // {R20} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R22} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1.6.3.6 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1017() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1.6.3.7[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R21} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue(), "element")); // {R20} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue(), "previous")); // {R22} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1.6.3.7 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1018() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1//.1.7[7]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue(), "next")); // {R21} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1//.1.7 trace is safe.
//.1//.1.2//.1//.1.2//.1//.1.2//.1 {ROOT}:dll.header.next.next.element not expanded. It may be a hint of too strong user-defined constraints, possibly correct when enforcing redundancy by representation invariant.
    @Test
    public void test1019() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1.2//.1//.1[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R17} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_this); // {R16} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R18} == Object[7] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1.2//.1//.1 trace is safe.
    @Test
    public void test1020() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1.2//.1.2[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R17} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_this); // {R16} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R18} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1.2//.1.2 trace is safe.
    @Test
    public void test1021() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1.2//.1.3[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R17} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_this); // {R16} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R18} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1.2//.1.3 trace is safe.
    @Test
    public void test1022() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1.2//.1.4[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R17} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_this); // {R16} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R18} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1.2//.1.4 trace is safe.
    @Test
    public void test1023() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1.2//.1.5[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R17} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_this); // {R16} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R18} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1.2//.1.5 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1024() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1.2//.1.6[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R17} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_this); // {R16} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "previous")); // {R18} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1.2//.1.6 trace is safe.
    @Test
    public void test1025() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1.2.2//.1[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R17} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_dll); // {R16} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R18} == Object[7] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1.2.2//.1 trace is safe.
    @Test
    public void test1026() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1.2.2.2[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R17} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_dll); // {R16} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R18} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1.2.2.2 trace is safe.
    @Test
    public void test1027() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1.2.2.3[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R17} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_dll); // {R16} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R18} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1.2.2.3 trace is safe.
    @Test
    public void test1028() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1.2.2.4[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R17} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_dll); // {R16} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R18} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1.2.2.4 trace is safe.
    @Test
    public void test1029() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1.2.2.5[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R17} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_dll); // {R16} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R18} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1.2.2.5 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1030() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1.2.2.6[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R17} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_dll); // {R16} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "previous")); // {R18} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1.2.2.6 trace is safe.
    @Test
    public void test1031() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1.2.3//.1[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R17} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "element")); // {R16} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R18} == Object[7] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1.2.3//.1 trace is safe.
    @Test
    public void test1032() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1.2.3.2[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R17} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "element")); // {R16} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R18} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1.2.3.2 trace is safe.
    @Test
    public void test1033() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1.2.3.3[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R17} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "element")); // {R16} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R18} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1.2.3.3 trace is safe.
    @Test
    public void test1034() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1.2.3.4[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R17} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "element")); // {R16} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R18} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1.2.3.4 trace is safe.
    @Test
    public void test1035() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1.2.3.5[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R17} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "element")); // {R16} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R18} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1.2.3.5 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1036() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1.2.3.6[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R17} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "element")); // {R16} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "previous")); // {R18} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1.2.3.6 trace is safe.
    @Test(expected=java.util.NoSuchElementException.class)
    public void test1037() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1.3[66]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R17} == Object[4] (aliases {ROOT}:dll.header.previous)
        ; // pre_init(java/util/NoSuchElementException)
        ; // pre_init(java/lang/RuntimeException)
        ; // pre_init(java/lang/Exception)
        ; // pre_init(java/lang/Throwable)
        ; // !pre_init(java/lang/String)
        ; // !pre_init(java/lang/String$CaseInsensitiveComparator)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1.3 trace is safe.
//.1//.1.2//.1//.1.2//.1//.1.4//.1 {ROOT}:dll.header.next.element not expanded. It may be a hint of too strong user-defined constraints, possibly correct when enforcing redundancy by representation invariant.
    @Test
    public void test1038() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1.4//.1//.1[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R17} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_this); // {R12} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R14} == Object[7] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1.4//.1//.1 trace is safe.
    @Test
    public void test1039() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1.4//.1.2[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R17} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_this); // {R12} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R14} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1.4//.1.2 trace is safe.
    @Test
    public void test1040() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1.4//.1.3[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R17} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_this); // {R12} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R14} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1.4//.1.3 trace is safe.
    @Test
    public void test1041() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1.4//.1.4[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R17} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_this); // {R12} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R14} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1.4//.1.4 trace is safe.
    @Test
    public void test1042() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1.4//.1.5[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R17} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_this); // {R12} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R14} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1.4//.1.5 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1043() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1.4//.1.6[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R17} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_this); // {R12} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "previous")); // {R14} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1.4//.1.6 trace is safe.
    @Test
    public void test1044() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1.4.2//.1[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R17} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_dll); // {R12} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R14} == Object[7] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1.4.2//.1 trace is safe.
    @Test
    public void test1045() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1.4.2.2[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R17} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_dll); // {R12} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R14} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1.4.2.2 trace is safe.
    @Test
    public void test1046() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1.4.2.3[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R17} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_dll); // {R12} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R14} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1.4.2.3 trace is safe.
    @Test
    public void test1047() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1.4.2.4[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R17} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_dll); // {R12} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R14} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1.4.2.4 trace is safe.
    @Test
    public void test1048() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1.4.2.5[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R17} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_dll); // {R12} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R14} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1.4.2.5 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1049() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1.4.2.6[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R17} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_dll); // {R12} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "previous")); // {R14} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1.4.2.6 trace is safe.
    @Test
    public void test1050() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1.4.3//.1[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R17} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "element")); // {R12} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R14} == Object[7] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1.4.3//.1 trace is safe.
    @Test
    public void test1051() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1.4.3.2[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R17} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "element")); // {R12} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R14} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1.4.3.2 trace is safe.
    @Test
    public void test1052() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1.4.3.3[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R17} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "element")); // {R12} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R14} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1.4.3.3 trace is safe.
    @Test
    public void test1053() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1.4.3.4[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R17} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "element")); // {R12} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R14} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1.4.3.4 trace is safe.
    @Test
    public void test1054() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1.4.3.5[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R17} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "element")); // {R12} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R14} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1.4.3.5 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1055() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1.4.3.6[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R17} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "element")); // {R12} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "previous")); // {R14} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1.4.3.6 trace is safe.
//.1//.1.2//.1//.1.2//.1//.1.5//.1 {ROOT}:dll.header.next.next.element not expanded. It may be a hint of too strong user-defined constraints, possibly correct when enforcing redundancy by representation invariant.
    @Test
    public void test1056() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1.5//.1//.1[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R17} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_this); // {R16} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R18} == Object[7] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1.5//.1//.1 trace is safe.
    @Test
    public void test1057() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1.5//.1.2[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R17} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_this); // {R16} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R18} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1.5//.1.2 trace is safe.
    @Test
    public void test1058() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1.5//.1.3[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R17} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_this); // {R16} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R18} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1.5//.1.3 trace is safe.
    @Test
    public void test1059() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1.5//.1.4[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R17} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_this); // {R16} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R18} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1.5//.1.4 trace is safe.
    @Test
    public void test1060() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1.5//.1.5[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R17} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_this); // {R16} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R18} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1.5//.1.5 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1061() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1.5//.1.6[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R17} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_this); // {R16} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "previous")); // {R18} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1.5//.1.6 trace is safe.
    @Test
    public void test1062() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1.5.2//.1[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R17} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_dll); // {R16} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R18} == Object[7] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1.5.2//.1 trace is safe.
    @Test
    public void test1063() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1.5.2.2[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R17} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_dll); // {R16} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R18} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1.5.2.2 trace is safe.
    @Test
    public void test1064() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1.5.2.3[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R17} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_dll); // {R16} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R18} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1.5.2.3 trace is safe.
    @Test
    public void test1065() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1.5.2.4[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R17} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_dll); // {R16} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R18} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1.5.2.4 trace is safe.
    @Test
    public void test1066() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1.5.2.5[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R17} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_dll); // {R16} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R18} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1.5.2.5 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1067() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1.5.2.6[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R17} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_dll); // {R16} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "previous")); // {R18} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1.5.2.6 trace is safe.
    @Test
    public void test1068() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1.5.3//.1[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R17} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "element")); // {R16} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R18} == Object[7] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1.5.3//.1 trace is safe.
    @Test
    public void test1069() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1.5.3.2[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R17} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "element")); // {R16} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R18} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1.5.3.2 trace is safe.
    @Test
    public void test1070() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1.5.3.3[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R17} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "element")); // {R16} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R18} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1.5.3.3 trace is safe.
    @Test
    public void test1071() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1.5.3.4[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R17} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "element")); // {R16} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R18} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1.5.3.4 trace is safe.
    @Test
    public void test1072() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1.5.3.5[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R17} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "element")); // {R16} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R18} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1.5.3.5 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1073() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1.5.3.6[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R17} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "element")); // {R16} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "previous")); // {R18} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1.5.3.6 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1074() {
        //test case for state //.1//.1.2//.1//.1.2//.1//.1.6[7]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "next")); // {R17} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1//.1.6 trace is safe.
//.1//.1.2//.1//.1.2//.1.2//.1 {ROOT}:dll.header.next.element not expanded. It may be a hint of too strong user-defined constraints, possibly correct when enforcing redundancy by representation invariant.
    @Test
    public void test1075() {
        //test case for state //.1//.1.2//.1//.1.2//.1.2//.1//.1[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R13} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_this); // {R12} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R14} == Object[6] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1.2//.1//.1 trace is safe.
    @Test
    public void test1076() {
        //test case for state //.1//.1.2//.1//.1.2//.1.2//.1.2[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R13} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_this); // {R12} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R14} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1.2//.1.2 trace is safe.
    @Test
    public void test1077() {
        //test case for state //.1//.1.2//.1//.1.2//.1.2//.1.3[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R13} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_this); // {R12} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R14} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1.2//.1.3 trace is safe.
    @Test
    public void test1078() {
        //test case for state //.1//.1.2//.1//.1.2//.1.2//.1.4[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R13} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_this); // {R12} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R14} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1.2//.1.4 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1079() {
        //test case for state //.1//.1.2//.1//.1.2//.1.2//.1.5[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R13} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_this); // {R12} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "previous")); // {R14} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1.2//.1.5 trace is safe.
    @Test
    public void test1080() {
        //test case for state //.1//.1.2//.1//.1.2//.1.2.2//.1[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R13} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_dll); // {R12} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R14} == Object[6] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1.2.2//.1 trace is safe.
    @Test
    public void test1081() {
        //test case for state //.1//.1.2//.1//.1.2//.1.2.2.2[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R13} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_dll); // {R12} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R14} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1.2.2.2 trace is safe.
    @Test
    public void test1082() {
        //test case for state //.1//.1.2//.1//.1.2//.1.2.2.3[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R13} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_dll); // {R12} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R14} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1.2.2.3 trace is safe.
    @Test
    public void test1083() {
        //test case for state //.1//.1.2//.1//.1.2//.1.2.2.4[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R13} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_dll); // {R12} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R14} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1.2.2.4 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1084() {
        //test case for state //.1//.1.2//.1//.1.2//.1.2.2.5[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R13} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_dll); // {R12} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "previous")); // {R14} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1.2.2.5 trace is safe.
    @Test
    public void test1085() {
        //test case for state //.1//.1.2//.1//.1.2//.1.2.3//.1[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R13} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "element")); // {R12} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R14} == Object[6] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1.2.3//.1 trace is safe.
    @Test
    public void test1086() {
        //test case for state //.1//.1.2//.1//.1.2//.1.2.3.2[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R13} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "element")); // {R12} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R14} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1.2.3.2 trace is safe.
    @Test
    public void test1087() {
        //test case for state //.1//.1.2//.1//.1.2//.1.2.3.3[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R13} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "element")); // {R12} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R14} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1.2.3.3 trace is safe.
    @Test
    public void test1088() {
        //test case for state //.1//.1.2//.1//.1.2//.1.2.3.4[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R13} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "element")); // {R12} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R14} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1.2.3.4 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1089() {
        //test case for state //.1//.1.2//.1//.1.2//.1.2.3.5[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R13} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "element")); // {R12} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "previous")); // {R14} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1.2.3.5 trace is safe.
//.1//.1.2//.1//.1.2//.1.3//.1 {ROOT}:dll.header.next.element not expanded. It may be a hint of too strong user-defined constraints, possibly correct when enforcing redundancy by representation invariant.
    @Test
    public void test1090() {
        //test case for state //.1//.1.2//.1//.1.2//.1.3//.1//.1[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R13} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_this); // {R12} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R14} == Object[6] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1.3//.1//.1 trace is safe.
    @Test
    public void test1091() {
        //test case for state //.1//.1.2//.1//.1.2//.1.3//.1.2[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R13} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_this); // {R12} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R14} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1.3//.1.2 trace is safe.
    @Test
    public void test1092() {
        //test case for state //.1//.1.2//.1//.1.2//.1.3//.1.3[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R13} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_this); // {R12} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R14} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1.3//.1.3 trace is safe.
    @Test
    public void test1093() {
        //test case for state //.1//.1.2//.1//.1.2//.1.3//.1.4[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R13} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_this); // {R12} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R14} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1.3//.1.4 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1094() {
        //test case for state //.1//.1.2//.1//.1.2//.1.3//.1.5[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R13} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_this); // {R12} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "previous")); // {R14} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1.3//.1.5 trace is safe.
    @Test
    public void test1095() {
        //test case for state //.1//.1.2//.1//.1.2//.1.3.2//.1[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R13} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_dll); // {R12} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R14} == Object[6] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1.3.2//.1 trace is safe.
    @Test
    public void test1096() {
        //test case for state //.1//.1.2//.1//.1.2//.1.3.2.2[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R13} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_dll); // {R12} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R14} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1.3.2.2 trace is safe.
    @Test
    public void test1097() {
        //test case for state //.1//.1.2//.1//.1.2//.1.3.2.3[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R13} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_dll); // {R12} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R14} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1.3.2.3 trace is safe.
    @Test
    public void test1098() {
        //test case for state //.1//.1.2//.1//.1.2//.1.3.2.4[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R13} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_dll); // {R12} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R14} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1.3.2.4 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1099() {
        //test case for state //.1//.1.2//.1//.1.2//.1.3.2.5[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R13} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_dll); // {R12} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "previous")); // {R14} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1.3.2.5 trace is safe.
    @Test
    public void test1100() {
        //test case for state //.1//.1.2//.1//.1.2//.1.3.3//.1[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R13} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "element")); // {R12} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R14} == Object[6] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1.3.3//.1 trace is safe.
    @Test
    public void test1101() {
        //test case for state //.1//.1.2//.1//.1.2//.1.3.3.2[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R13} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "element")); // {R12} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R14} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1.3.3.2 trace is safe.
    @Test
    public void test1102() {
        //test case for state //.1//.1.2//.1//.1.2//.1.3.3.3[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R13} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "element")); // {R12} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R14} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1.3.3.3 trace is safe.
    @Test
    public void test1103() {
        //test case for state //.1//.1.2//.1//.1.2//.1.3.3.4[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R13} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "element")); // {R12} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R14} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1.3.3.4 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1104() {
        //test case for state //.1//.1.2//.1//.1.2//.1.3.3.5[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R13} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "element")); // {R12} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "previous")); // {R14} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1.3.3.5 trace is safe.
//.1//.1.2//.1//.1.2//.1.4//.1 {ROOT}:dll.header.next.element not expanded. It may be a hint of too strong user-defined constraints, possibly correct when enforcing redundancy by representation invariant.
    @Test
    public void test1105() {
        //test case for state //.1//.1.2//.1//.1.2//.1.4//.1//.1[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R13} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_this); // {R12} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R14} == Object[6] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1.4//.1//.1 trace is safe.
    @Test
    public void test1106() {
        //test case for state //.1//.1.2//.1//.1.2//.1.4//.1.2[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R13} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_this); // {R12} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R14} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1.4//.1.2 trace is safe.
    @Test
    public void test1107() {
        //test case for state //.1//.1.2//.1//.1.2//.1.4//.1.3[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R13} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_this); // {R12} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R14} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1.4//.1.3 trace is safe.
    @Test
    public void test1108() {
        //test case for state //.1//.1.2//.1//.1.2//.1.4//.1.4[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R13} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_this); // {R12} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R14} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1.4//.1.4 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1109() {
        //test case for state //.1//.1.2//.1//.1.2//.1.4//.1.5[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R13} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_this); // {R12} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "previous")); // {R14} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1.4//.1.5 trace is safe.
    @Test
    public void test1110() {
        //test case for state //.1//.1.2//.1//.1.2//.1.4.2//.1[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R13} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_dll); // {R12} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R14} == Object[6] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1.4.2//.1 trace is safe.
    @Test
    public void test1111() {
        //test case for state //.1//.1.2//.1//.1.2//.1.4.2.2[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R13} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_dll); // {R12} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R14} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1.4.2.2 trace is safe.
    @Test
    public void test1112() {
        //test case for state //.1//.1.2//.1//.1.2//.1.4.2.3[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R13} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_dll); // {R12} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R14} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1.4.2.3 trace is safe.
    @Test
    public void test1113() {
        //test case for state //.1//.1.2//.1//.1.2//.1.4.2.4[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R13} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_dll); // {R12} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R14} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1.4.2.4 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1114() {
        //test case for state //.1//.1.2//.1//.1.2//.1.4.2.5[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R13} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_dll); // {R12} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "previous")); // {R14} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1.4.2.5 trace is safe.
    @Test
    public void test1115() {
        //test case for state //.1//.1.2//.1//.1.2//.1.4.3//.1[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R13} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "element")); // {R12} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R14} == Object[6] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1.4.3//.1 trace is safe.
    @Test
    public void test1116() {
        //test case for state //.1//.1.2//.1//.1.2//.1.4.3.2[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R13} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "element")); // {R12} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R14} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1.4.3.2 trace is safe.
    @Test
    public void test1117() {
        //test case for state //.1//.1.2//.1//.1.2//.1.4.3.3[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R13} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "element")); // {R12} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R14} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1.4.3.3 trace is safe.
    @Test
    public void test1118() {
        //test case for state //.1//.1.2//.1//.1.2//.1.4.3.4[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R13} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "element")); // {R12} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R14} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1.4.3.4 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1119() {
        //test case for state //.1//.1.2//.1//.1.2//.1.4.3.5[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R13} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "element")); // {R12} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "previous")); // {R14} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1.4.3.5 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1120() {
        //test case for state //.1//.1.2//.1//.1.2//.1.5[7]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "next")); // {R13} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2//.1.5 trace is safe.
    @Test(expected=java.util.NoSuchElementException.class)
    public void test1121() {
        //test case for state //.1//.1.2//.1//.1.2.2[80]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R5} == Object[2] (aliases {ROOT}:dll.header)
        ; // pre_init(java/util/NoSuchElementException)
        ; // pre_init(java/lang/RuntimeException)
        ; // pre_init(java/lang/Exception)
        ; // pre_init(java/lang/Throwable)
        ; // !pre_init(java/lang/String)
        ; // !pre_init(java/lang/String$CaseInsensitiveComparator)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2.2 trace is safe.
    @Test
    public void test1122() {
        //test case for state //.1//.1.2//.1//.1.2.3[85]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R5} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2.3 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1123() {
        //test case for state //.1//.1.2//.1//.1.2.4[7]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").getValue(), "next")); // {R5} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1//.1.2.4 trace is safe.
    @Test(expected=java.lang.IndexOutOfBoundsException.class)
    public void test1124() {
        //test case for state //.1//.1.2//.1.2//.1[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R6} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).set("size", 0);  // 4 >= {V3} + 1
        ; // pre_init(java/lang/IndexOutOfBoundsException)
        ; // pre_init(java/lang/RuntimeException)
        ; // pre_init(java/lang/Exception)
        ; // pre_init(java/lang/Throwable)
        ; // !pre_init(java/lang/String)
        ; // !pre_init(java/lang/String$CaseInsensitiveComparator)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1.2//.1 trace is safe.
    @Test
    public void test1125() {
        //test case for state //.1//.1.2//.1.2.2[96]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R6} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1.2.2 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1126() {
        //test case for state //.1//.1.2//.1.3[23]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").getValue(), "previous")); // {R6} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2//.1.3 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1127() {
        //test case for state //.1//.1.2.2[7]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        common.LinkedList __ROOT_o = __ROOT_dll; // {R2} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).set("header", null);this.nullObjectFields.add(new ObjectField(__ROOT_dll, "header")); // {R3} == null
        ; // pre_init(common/LinkedList$Entry)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.2.2 trace is safe.
    @Test(expected=java.lang.IndexOutOfBoundsException.class)
    public void test1128() {
        //test case for state //.1//.1.3//.1//.1//.1[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 0);  // 4 >= {V3} + 1
        ; // pre_init(java/lang/IndexOutOfBoundsException)
        ; // pre_init(java/lang/RuntimeException)
        ; // pre_init(java/lang/Exception)
        ; // pre_init(java/lang/Throwable)
        ; // !pre_init(java/lang/String)
        ; // !pre_init(java/lang/String$CaseInsensitiveComparator)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1//.1 trace is safe.
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1 {ROOT}:dll.header.next.next.next.next.next.element not expanded. It may be a hint of too strong user-defined constraints, possibly correct when enforcing redundancy by representation invariant.
    @Test
    public void test1129() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1//.1//.1[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R30} == Object[10] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R29} == Object[11] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1//.1//.1 trace is safe.
    @Test
    public void test1130() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1//.1.2[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R30} == Object[10] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R29} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1//.1.2 trace is safe.
    @Test
    public void test1131() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1//.1.3[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R30} == Object[10] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R29} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1//.1.3 trace is safe.
    @Test
    public void test1132() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1//.1.4[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R30} == Object[10] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R29} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1//.1.4 trace is safe.
    @Test
    public void test1133() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1//.1.5[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R30} == Object[10] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R29} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1//.1.5 trace is safe.
    @Test
    public void test1134() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1//.1.6[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R30} == Object[10] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R29} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1//.1.6 trace is safe.
    @Test
    public void test1135() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1//.1.7[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R30} == Object[10] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1//.1.7 trace is safe.
    @Test
    public void test1136() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1//.1.8[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R30} == Object[10] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1//.1.8 trace is safe.
    @Test
    public void test1137() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1//.1.9[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R30} == Object[10] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").get("previous").getValue()); // {R29} == Object[10] (aliases {ROOT}:dll.header.next.next.next.next.next.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1//.1.9 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1138() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1//.1//.10[6]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R30} == Object[10] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "next")); // {R29} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1//.1//.10 trace is safe.
    @Test
    public void test1139() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.2//.1[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R30} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R29} == Object[10] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.2//.1 trace is safe.
    @Test
    public void test1140() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.2.2[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R30} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R29} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.2.2 trace is safe.
    @Test
    public void test1141() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.2.3[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R30} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R29} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.2.3 trace is safe.
    @Test
    public void test1142() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.2.4[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R30} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R29} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.2.4 trace is safe.
    @Test
    public void test1143() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.2.5[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R30} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R29} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.2.5 trace is safe.
    @Test
    public void test1144() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.2.6[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R30} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R29} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.2.6 trace is safe.
    @Test
    public void test1145() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.2.7[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R30} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.2.7 trace is safe.
    @Test
    public void test1146() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.2.8[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R30} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.2.8 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1147() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.2.9[6]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R30} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "next")); // {R29} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.2.9 trace is safe.
    @Test
    public void test1148() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.3//.1[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R30} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R29} == Object[10] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.3//.1 trace is safe.
    @Test
    public void test1149() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.3.2[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R30} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R29} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.3.2 trace is safe.
    @Test
    public void test1150() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.3.3[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R30} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R29} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.3.3 trace is safe.
    @Test
    public void test1151() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.3.4[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R30} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R29} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.3.4 trace is safe.
    @Test
    public void test1152() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.3.5[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R30} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R29} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.3.5 trace is safe.
    @Test
    public void test1153() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.3.6[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R30} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R29} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.3.6 trace is safe.
    @Test
    public void test1154() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.3.7[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R30} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.3.7 trace is safe.
    @Test
    public void test1155() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.3.8[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R30} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.3.8 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1156() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.3.9[6]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R30} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "next")); // {R29} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.3.9 trace is safe.
    @Test
    public void test1157() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.4//.1[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R30} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R29} == Object[10] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.4//.1 trace is safe.
    @Test
    public void test1158() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.4.2[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R30} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R29} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.4.2 trace is safe.
    @Test
    public void test1159() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.4.3[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R30} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R29} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.4.3 trace is safe.
    @Test
    public void test1160() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.4.4[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R30} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R29} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.4.4 trace is safe.
    @Test
    public void test1161() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.4.5[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R30} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R29} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.4.5 trace is safe.
    @Test
    public void test1162() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.4.6[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R30} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R29} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.4.6 trace is safe.
    @Test
    public void test1163() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.4.7[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R30} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.4.7 trace is safe.
    @Test
    public void test1164() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.4.8[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R30} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.4.8 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1165() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.4.9[6]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R30} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "next")); // {R29} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.4.9 trace is safe.
    @Test
    public void test1166() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.5//.1[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R30} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R29} == Object[10] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.5//.1 trace is safe.
    @Test
    public void test1167() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.5.2[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R30} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R29} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.5.2 trace is safe.
    @Test
    public void test1168() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.5.3[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R30} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R29} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.5.3 trace is safe.
    @Test
    public void test1169() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.5.4[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R30} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R29} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.5.4 trace is safe.
    @Test
    public void test1170() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.5.5[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R30} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R29} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.5.5 trace is safe.
    @Test
    public void test1171() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.5.6[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R30} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R29} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.5.6 trace is safe.
    @Test
    public void test1172() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.5.7[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R30} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.5.7 trace is safe.
    @Test
    public void test1173() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.5.8[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R30} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.5.8 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1174() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.5.9[6]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R30} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "next")); // {R29} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.5.9 trace is safe.
    @Test
    public void test1175() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.6//.1[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R30} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R29} == Object[10] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.6//.1 trace is safe.
    @Test
    public void test1176() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.6.2[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R30} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R29} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.6.2 trace is safe.
    @Test
    public void test1177() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.6.3[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R30} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R29} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.6.3 trace is safe.
    @Test
    public void test1178() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.6.4[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R30} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R29} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.6.4 trace is safe.
    @Test
    public void test1179() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.6.5[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R30} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R29} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.6.5 trace is safe.
    @Test
    public void test1180() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.6.6[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R30} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R29} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.6.6 trace is safe.
    @Test
    public void test1181() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.6.7[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R30} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.6.7 trace is safe.
    @Test
    public void test1182() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.6.8[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R30} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.6.8 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1183() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.6.9[6]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R30} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "next")); // {R29} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.6.9 trace is safe.
    @Test
    public void test1184() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.7//.1[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R29} == Object[10] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.7//.1 trace is safe.
    @Test
    public void test1185() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.7.2[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R29} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.7.2 trace is safe.
    @Test
    public void test1186() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.7.3[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R29} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.7.3 trace is safe.
    @Test
    public void test1187() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.7.4[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R29} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.7.4 trace is safe.
    @Test
    public void test1188() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.7.5[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R29} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.7.5 trace is safe.
    @Test
    public void test1189() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.7.6[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R29} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.7.6 trace is safe.
    @Test
    public void test1190() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.7.7[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.7.7 trace is safe.
    @Test
    public void test1191() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.7.8[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.7.8 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1192() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.7.9[6]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "next")); // {R29} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.7.9 trace is safe.
    @Test
    public void test1193() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.8//.1[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R29} == Object[10] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.8//.1 trace is safe.
    @Test
    public void test1194() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.8.2[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R29} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.8.2 trace is safe.
    @Test
    public void test1195() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.8.3[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R29} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.8.3 trace is safe.
    @Test
    public void test1196() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.8.4[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R29} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.8.4 trace is safe.
    @Test
    public void test1197() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.8.5[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R29} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.8.5 trace is safe.
    @Test
    public void test1198() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.8.6[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R29} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.8.6 trace is safe.
    @Test
    public void test1199() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.8.7[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.8.7 trace is safe.
    @Test
    public void test1200() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.8.8[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.8.8 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1201() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.8.9[6]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "next")); // {R29} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.8.9 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1202() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.9//.1[1]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "previous")); // {R30} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R29} == Object[10] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.9//.1 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1203() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.9.2[1]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "previous")); // {R30} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R29} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.9.2 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1204() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.9.3[1]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "previous")); // {R30} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R29} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.9.3 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1205() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.9.4[1]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "previous")); // {R30} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R29} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.9.4 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1206() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.9.5[1]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "previous")); // {R30} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R29} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.9.5 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1207() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.9.6[1]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "previous")); // {R30} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R29} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.9.6 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1208() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.9.7[1]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "previous")); // {R30} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.9.7 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1209() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.9.8[1]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "previous")); // {R30} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.9.8 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1210() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.9.9[1]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R28} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "previous")); // {R30} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "next")); // {R29} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1//.1.9.9 trace is safe.
    @Test
    public void test1211() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2//.1//.1[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R30} == Object[10] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R29} == Object[11] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2//.1//.1 trace is safe.
    @Test
    public void test1212() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2//.1.2[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R30} == Object[10] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R29} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2//.1.2 trace is safe.
    @Test
    public void test1213() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2//.1.3[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R30} == Object[10] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R29} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2//.1.3 trace is safe.
    @Test
    public void test1214() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2//.1.4[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R30} == Object[10] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R29} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2//.1.4 trace is safe.
    @Test
    public void test1215() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2//.1.5[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R30} == Object[10] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R29} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2//.1.5 trace is safe.
    @Test
    public void test1216() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2//.1.6[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R30} == Object[10] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R29} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2//.1.6 trace is safe.
    @Test
    public void test1217() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2//.1.7[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R30} == Object[10] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2//.1.7 trace is safe.
    @Test
    public void test1218() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2//.1.8[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R30} == Object[10] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2//.1.8 trace is safe.
    @Test
    public void test1219() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2//.1.9[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R30} == Object[10] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").get("previous").getValue()); // {R29} == Object[10] (aliases {ROOT}:dll.header.next.next.next.next.next.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2//.1.9 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1220() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2//.1//.10[6]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R30} == Object[10] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "next")); // {R29} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2//.1//.10 trace is safe.
    @Test
    public void test1221() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.2//.1[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R30} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R29} == Object[10] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.2//.1 trace is safe.
    @Test
    public void test1222() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.2.2[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R30} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R29} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.2.2 trace is safe.
    @Test
    public void test1223() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.2.3[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R30} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R29} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.2.3 trace is safe.
    @Test
    public void test1224() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.2.4[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R30} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R29} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.2.4 trace is safe.
    @Test
    public void test1225() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.2.5[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R30} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R29} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.2.5 trace is safe.
    @Test
    public void test1226() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.2.6[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R30} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R29} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.2.6 trace is safe.
    @Test
    public void test1227() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.2.7[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R30} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.2.7 trace is safe.
    @Test
    public void test1228() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.2.8[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R30} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.2.8 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1229() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.2.9[6]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R30} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "next")); // {R29} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.2.9 trace is safe.
    @Test
    public void test1230() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.3//.1[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R30} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R29} == Object[10] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.3//.1 trace is safe.
    @Test
    public void test1231() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.3.2[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R30} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R29} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.3.2 trace is safe.
    @Test
    public void test1232() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.3.3[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R30} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R29} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.3.3 trace is safe.
    @Test
    public void test1233() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.3.4[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R30} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R29} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.3.4 trace is safe.
    @Test
    public void test1234() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.3.5[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R30} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R29} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.3.5 trace is safe.
    @Test
    public void test1235() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.3.6[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R30} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R29} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.3.6 trace is safe.
    @Test
    public void test1236() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.3.7[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R30} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.3.7 trace is safe.
    @Test
    public void test1237() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.3.8[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R30} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.3.8 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1238() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.3.9[6]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R30} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "next")); // {R29} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.3.9 trace is safe.
    @Test
    public void test1239() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.4//.1[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R30} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R29} == Object[10] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.4//.1 trace is safe.
    @Test
    public void test1240() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.4.2[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R30} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R29} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.4.2 trace is safe.
    @Test
    public void test1241() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.4.3[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R30} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R29} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.4.3 trace is safe.
    @Test
    public void test1242() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.4.4[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R30} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R29} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.4.4 trace is safe.
    @Test
    public void test1243() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.4.5[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R30} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R29} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.4.5 trace is safe.
    @Test
    public void test1244() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.4.6[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R30} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R29} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.4.6 trace is safe.
    @Test
    public void test1245() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.4.7[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R30} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.4.7 trace is safe.
    @Test
    public void test1246() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.4.8[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R30} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.4.8 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1247() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.4.9[6]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R30} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "next")); // {R29} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.4.9 trace is safe.
    @Test
    public void test1248() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.5//.1[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R30} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R29} == Object[10] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.5//.1 trace is safe.
    @Test
    public void test1249() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.5.2[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R30} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R29} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.5.2 trace is safe.
    @Test
    public void test1250() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.5.3[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R30} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R29} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.5.3 trace is safe.
    @Test
    public void test1251() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.5.4[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R30} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R29} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.5.4 trace is safe.
    @Test
    public void test1252() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.5.5[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R30} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R29} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.5.5 trace is safe.
    @Test
    public void test1253() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.5.6[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R30} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R29} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.5.6 trace is safe.
    @Test
    public void test1254() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.5.7[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R30} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.5.7 trace is safe.
    @Test
    public void test1255() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.5.8[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R30} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.5.8 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1256() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.5.9[6]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R30} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "next")); // {R29} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.5.9 trace is safe.
    @Test
    public void test1257() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.6//.1[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R30} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R29} == Object[10] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.6//.1 trace is safe.
    @Test
    public void test1258() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.6.2[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R30} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R29} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.6.2 trace is safe.
    @Test
    public void test1259() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.6.3[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R30} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R29} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.6.3 trace is safe.
    @Test
    public void test1260() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.6.4[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R30} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R29} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.6.4 trace is safe.
    @Test
    public void test1261() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.6.5[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R30} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R29} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.6.5 trace is safe.
    @Test
    public void test1262() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.6.6[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R30} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R29} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.6.6 trace is safe.
    @Test
    public void test1263() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.6.7[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R30} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.6.7 trace is safe.
    @Test
    public void test1264() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.6.8[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R30} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.6.8 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1265() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.6.9[6]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R30} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "next")); // {R29} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.6.9 trace is safe.
    @Test
    public void test1266() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.7//.1[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R29} == Object[10] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.7//.1 trace is safe.
    @Test
    public void test1267() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.7.2[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R29} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.7.2 trace is safe.
    @Test
    public void test1268() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.7.3[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R29} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.7.3 trace is safe.
    @Test
    public void test1269() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.7.4[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R29} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.7.4 trace is safe.
    @Test
    public void test1270() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.7.5[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R29} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.7.5 trace is safe.
    @Test
    public void test1271() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.7.6[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R29} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.7.6 trace is safe.
    @Test
    public void test1272() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.7.7[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.7.7 trace is safe.
    @Test
    public void test1273() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.7.8[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.7.8 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1274() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.7.9[6]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "next")); // {R29} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.7.9 trace is safe.
    @Test
    public void test1275() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.8//.1[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R29} == Object[10] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.8//.1 trace is safe.
    @Test
    public void test1276() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.8.2[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R29} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.8.2 trace is safe.
    @Test
    public void test1277() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.8.3[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R29} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.8.3 trace is safe.
    @Test
    public void test1278() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.8.4[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R29} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.8.4 trace is safe.
    @Test
    public void test1279() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.8.5[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R29} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.8.5 trace is safe.
    @Test
    public void test1280() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.8.6[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R29} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.8.6 trace is safe.
    @Test
    public void test1281() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.8.7[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.8.7 trace is safe.
    @Test
    public void test1282() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.8.8[35]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.8.8 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1283() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.8.9[6]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "next")); // {R29} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.8.9 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1284() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.9//.1[1]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "previous")); // {R30} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R29} == Object[10] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.9//.1 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1285() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.9.2[1]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "previous")); // {R30} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R29} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.9.2 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1286() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.9.3[1]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "previous")); // {R30} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R29} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.9.3 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1287() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.9.4[1]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "previous")); // {R30} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R29} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.9.4 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1288() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.9.5[1]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "previous")); // {R30} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R29} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.9.5 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1289() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.9.6[1]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "previous")); // {R30} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R29} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.9.6 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1290() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.9.7[1]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "previous")); // {R30} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.9.7 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1291() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.9.8[1]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "previous")); // {R30} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.9.8 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1292() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.9.9[1]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R28} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "previous")); // {R30} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "next")); // {R29} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.2.9.9 trace is safe.
    @Test
    public void test1293() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3//.1//.1[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R30} == Object[10] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R29} == Object[11] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3//.1//.1 trace is safe.
    @Test
    public void test1294() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3//.1.2[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R30} == Object[10] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R29} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3//.1.2 trace is safe.
    @Test
    public void test1295() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3//.1.3[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R30} == Object[10] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R29} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3//.1.3 trace is safe.
    @Test
    public void test1296() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3//.1.4[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R30} == Object[10] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R29} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3//.1.4 trace is safe.
    @Test
    public void test1297() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3//.1.5[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R30} == Object[10] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R29} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3//.1.5 trace is safe.
    @Test
    public void test1298() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3//.1.6[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R30} == Object[10] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R29} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3//.1.6 trace is safe.
    @Test
    public void test1299() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3//.1.7[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R30} == Object[10] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3//.1.7 trace is safe.
    @Test
    public void test1300() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3//.1.8[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R30} == Object[10] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3//.1.8 trace is safe.
    @Test
    public void test1301() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3//.1.9[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R30} == Object[10] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").get("previous").getValue()); // {R29} == Object[10] (aliases {ROOT}:dll.header.next.next.next.next.next.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3//.1.9 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1302() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3//.1//.10[6]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R30} == Object[10] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "next")); // {R29} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3//.1//.10 trace is safe.
    @Test
    public void test1303() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.2//.1[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R30} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R29} == Object[10] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.2//.1 trace is safe.
    @Test
    public void test1304() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.2.2[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R30} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R29} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.2.2 trace is safe.
    @Test
    public void test1305() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.2.3[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R30} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R29} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.2.3 trace is safe.
    @Test
    public void test1306() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.2.4[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R30} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R29} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.2.4 trace is safe.
    @Test
    public void test1307() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.2.5[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R30} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R29} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.2.5 trace is safe.
    @Test
    public void test1308() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.2.6[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R30} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R29} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.2.6 trace is safe.
    @Test
    public void test1309() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.2.7[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R30} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.2.7 trace is safe.
    @Test
    public void test1310() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.2.8[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R30} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.2.8 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1311() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.2.9[6]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R30} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "next")); // {R29} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.2.9 trace is safe.
    @Test
    public void test1312() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.3//.1[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R30} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R29} == Object[10] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.3//.1 trace is safe.
    @Test
    public void test1313() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.3.2[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R30} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R29} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.3.2 trace is safe.
    @Test
    public void test1314() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.3.3[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R30} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R29} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.3.3 trace is safe.
    @Test
    public void test1315() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.3.4[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R30} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R29} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.3.4 trace is safe.
    @Test
    public void test1316() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.3.5[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R30} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R29} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.3.5 trace is safe.
    @Test
    public void test1317() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.3.6[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R30} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R29} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.3.6 trace is safe.
    @Test
    public void test1318() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.3.7[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R30} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.3.7 trace is safe.
    @Test
    public void test1319() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.3.8[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R30} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.3.8 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1320() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.3.9[6]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R30} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "next")); // {R29} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.3.9 trace is safe.
    @Test
    public void test1321() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.4//.1[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R30} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R29} == Object[10] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.4//.1 trace is safe.
    @Test
    public void test1322() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.4.2[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R30} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R29} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.4.2 trace is safe.
    @Test
    public void test1323() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.4.3[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R30} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R29} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.4.3 trace is safe.
    @Test
    public void test1324() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.4.4[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R30} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R29} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.4.4 trace is safe.
    @Test
    public void test1325() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.4.5[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R30} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R29} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.4.5 trace is safe.
    @Test
    public void test1326() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.4.6[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R30} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R29} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.4.6 trace is safe.
    @Test
    public void test1327() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.4.7[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R30} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.4.7 trace is safe.
    @Test
    public void test1328() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.4.8[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R30} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.4.8 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1329() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.4.9[6]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R30} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "next")); // {R29} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.4.9 trace is safe.
    @Test
    public void test1330() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.5//.1[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R30} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R29} == Object[10] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.5//.1 trace is safe.
    @Test
    public void test1331() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.5.2[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R30} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R29} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.5.2 trace is safe.
    @Test
    public void test1332() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.5.3[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R30} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R29} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.5.3 trace is safe.
    @Test
    public void test1333() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.5.4[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R30} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R29} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.5.4 trace is safe.
    @Test
    public void test1334() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.5.5[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R30} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R29} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.5.5 trace is safe.
    @Test
    public void test1335() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.5.6[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R30} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R29} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.5.6 trace is safe.
    @Test
    public void test1336() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.5.7[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R30} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.5.7 trace is safe.
    @Test
    public void test1337() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.5.8[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R30} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.5.8 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1338() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.5.9[6]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R30} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "next")); // {R29} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.5.9 trace is safe.
    @Test
    public void test1339() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.6//.1[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R30} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R29} == Object[10] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.6//.1 trace is safe.
    @Test
    public void test1340() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.6.2[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R30} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R29} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.6.2 trace is safe.
    @Test
    public void test1341() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.6.3[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R30} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R29} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.6.3 trace is safe.
    @Test
    public void test1342() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.6.4[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R30} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R29} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.6.4 trace is safe.
    @Test
    public void test1343() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.6.5[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R30} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R29} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.6.5 trace is safe.
    @Test
    public void test1344() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.6.6[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R30} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R29} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.6.6 trace is safe.
    @Test
    public void test1345() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.6.7[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R30} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.6.7 trace is safe.
    @Test
    public void test1346() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.6.8[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R30} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.6.8 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1347() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.6.9[6]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R30} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "next")); // {R29} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.6.9 trace is safe.
    @Test
    public void test1348() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.7//.1[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R29} == Object[10] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.7//.1 trace is safe.
    @Test
    public void test1349() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.7.2[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R29} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.7.2 trace is safe.
    @Test
    public void test1350() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.7.3[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R29} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.7.3 trace is safe.
    @Test
    public void test1351() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.7.4[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R29} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.7.4 trace is safe.
    @Test
    public void test1352() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.7.5[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R29} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.7.5 trace is safe.
    @Test
    public void test1353() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.7.6[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R29} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.7.6 trace is safe.
    @Test
    public void test1354() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.7.7[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.7.7 trace is safe.
    @Test
    public void test1355() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.7.8[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.7.8 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1356() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.7.9[6]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "next")); // {R29} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.7.9 trace is safe.
    @Test
    public void test1357() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.8//.1[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R29} == Object[10] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.8//.1 trace is safe.
    @Test
    public void test1358() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.8.2[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R29} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.8.2 trace is safe.
    @Test
    public void test1359() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.8.3[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R29} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.8.3 trace is safe.
    @Test
    public void test1360() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.8.4[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R29} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.8.4 trace is safe.
    @Test
    public void test1361() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.8.5[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R29} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.8.5 trace is safe.
    @Test
    public void test1362() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.8.6[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R29} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.8.6 trace is safe.
    @Test
    public void test1363() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.8.7[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.8.7 trace is safe.
    @Test
    public void test1364() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.8.8[38]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.8.8 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1365() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.8.9[6]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R30} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "next")); // {R29} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.8.9 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1366() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.9//.1[1]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "previous")); // {R30} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R29} == Object[10] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.9//.1 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1367() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.9.2[1]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "previous")); // {R30} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R29} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.9.2 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1368() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.9.3[1]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "previous")); // {R30} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R29} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.9.3 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1369() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.9.4[1]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "previous")); // {R30} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R29} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.9.4 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1370() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.9.5[1]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "previous")); // {R30} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R29} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.9.5 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1371() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.9.6[1]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "previous")); // {R30} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R29} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.9.6 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1372() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.9.7[1]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "previous")); // {R30} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.9.7 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1373() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.9.8[1]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "previous")); // {R30} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue()); // {R29} == Object[9] (aliases {ROOT}:dll.header.next.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.9.8 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1374() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.9.9[1]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R25} == Object[9] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "element")); // {R28} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "previous")); // {R30} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").set("next", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").get("next").getValue(), "next")); // {R29} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1//.1.3.9.9 trace is safe.
    @Test(expected=java.util.NoSuchElementException.class)
    public void test1375() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.2[52]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R25} == Object[2] (aliases {ROOT}:dll.header)
        ; // pre_init(java/util/NoSuchElementException)
        ; // pre_init(java/lang/RuntimeException)
        ; // pre_init(java/lang/Exception)
        ; // pre_init(java/lang/Throwable)
        ; // !pre_init(java/lang/String)
        ; // !pre_init(java/lang/String$CaseInsensitiveComparator)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.2 trace is safe.
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.3//.1 {ROOT}:dll.header.previous.element not expanded. It may be a hint of too strong user-defined constraints, possibly correct when enforcing redundancy by representation invariant.
    @Test
    public void test1376() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.3//.1//.1[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R25} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("element", __ROOT_this); // {R8} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("previous", newInstance("common.LinkedList$Entry")); // {R10} == Object[9] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.3//.1//.1 trace is safe.
    @Test
    public void test1377() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.3//.1.2[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R25} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("element", __ROOT_this); // {R8} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R10} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.3//.1.2 trace is safe.
    @Test
    public void test1378() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.3//.1.3[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R25} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("element", __ROOT_this); // {R8} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R10} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.3//.1.3 trace is safe.
    @Test
    public void test1379() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.3//.1.4[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R25} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("element", __ROOT_this); // {R8} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R10} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.3//.1.4 trace is safe.
    @Test
    public void test1380() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.3//.1.5[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R25} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("element", __ROOT_this); // {R8} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R10} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.3//.1.5 trace is safe.
    @Test
    public void test1381() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.3//.1.6[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R25} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("element", __ROOT_this); // {R8} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R10} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.3//.1.6 trace is safe.
    @Test
    public void test1382() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.3//.1.7[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R25} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("element", __ROOT_this); // {R8} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R10} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.3//.1.7 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1383() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.3//.1.8[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R25} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("element", __ROOT_this); // {R8} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue(), "previous")); // {R10} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.3//.1.8 trace is safe.
    @Test
    public void test1384() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.3.2//.1[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R25} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("element", __ROOT_dll); // {R8} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("previous", newInstance("common.LinkedList$Entry")); // {R10} == Object[9] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.3.2//.1 trace is safe.
    @Test
    public void test1385() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.3.2.2[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R25} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("element", __ROOT_dll); // {R8} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R10} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.3.2.2 trace is safe.
    @Test
    public void test1386() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.3.2.3[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R25} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("element", __ROOT_dll); // {R8} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R10} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.3.2.3 trace is safe.
    @Test
    public void test1387() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.3.2.4[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R25} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("element", __ROOT_dll); // {R8} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R10} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.3.2.4 trace is safe.
    @Test
    public void test1388() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.3.2.5[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R25} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("element", __ROOT_dll); // {R8} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R10} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.3.2.5 trace is safe.
    @Test
    public void test1389() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.3.2.6[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R25} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("element", __ROOT_dll); // {R8} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R10} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.3.2.6 trace is safe.
    @Test
    public void test1390() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.3.2.7[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R25} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("element", __ROOT_dll); // {R8} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R10} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.3.2.7 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1391() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.3.2.8[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R25} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("element", __ROOT_dll); // {R8} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue(), "previous")); // {R10} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.3.2.8 trace is safe.
    @Test
    public void test1392() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.3.3//.1[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R25} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue(), "element")); // {R8} == null
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("previous", newInstance("common.LinkedList$Entry")); // {R10} == Object[9] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.3.3//.1 trace is safe.
    @Test
    public void test1393() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.3.3.2[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R25} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue(), "element")); // {R8} == null
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R10} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.3.3.2 trace is safe.
    @Test
    public void test1394() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.3.3.3[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R25} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue(), "element")); // {R8} == null
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R10} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.3.3.3 trace is safe.
    @Test
    public void test1395() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.3.3.4[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R25} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue(), "element")); // {R8} == null
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R10} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.3.3.4 trace is safe.
    @Test
    public void test1396() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.3.3.5[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R25} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue(), "element")); // {R8} == null
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R10} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.3.3.5 trace is safe.
    @Test
    public void test1397() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.3.3.6[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R25} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue(), "element")); // {R8} == null
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R10} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.3.3.6 trace is safe.
    @Test
    public void test1398() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.3.3.7[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R25} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue(), "element")); // {R8} == null
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R10} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.3.3.7 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1399() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.3.3.8[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R25} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue(), "element")); // {R8} == null
        new AccessibleObject(__ROOT_dll).get("header").get("previous").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue(), "previous")); // {R10} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.3.3.8 trace is safe.
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.4//.1 {ROOT}:dll.header.next.element not expanded. It may be a hint of too strong user-defined constraints, possibly correct when enforcing redundancy by representation invariant.
    @Test
    public void test1400() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.4//.1//.1[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R25} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_this); // {R12} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R14} == Object[9] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.4//.1//.1 trace is safe.
    @Test
    public void test1401() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.4//.1.2[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R25} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_this); // {R12} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R14} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.4//.1.2 trace is safe.
    @Test
    public void test1402() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.4//.1.3[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R25} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_this); // {R12} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R14} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.4//.1.3 trace is safe.
    @Test
    public void test1403() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.4//.1.4[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R25} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_this); // {R12} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R14} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.4//.1.4 trace is safe.
    @Test
    public void test1404() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.4//.1.5[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R25} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_this); // {R12} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R14} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.4//.1.5 trace is safe.
    @Test
    public void test1405() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.4//.1.6[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R25} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_this); // {R12} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R14} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.4//.1.6 trace is safe.
    @Test
    public void test1406() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.4//.1.7[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R25} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_this); // {R12} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R14} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.4//.1.7 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1407() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.4//.1.8[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R25} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_this); // {R12} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "previous")); // {R14} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.4//.1.8 trace is safe.
    @Test
    public void test1408() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.4.2//.1[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R25} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_dll); // {R12} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R14} == Object[9] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.4.2//.1 trace is safe.
    @Test
    public void test1409() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.4.2.2[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R25} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_dll); // {R12} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R14} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.4.2.2 trace is safe.
    @Test
    public void test1410() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.4.2.3[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R25} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_dll); // {R12} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R14} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.4.2.3 trace is safe.
    @Test
    public void test1411() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.4.2.4[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R25} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_dll); // {R12} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R14} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.4.2.4 trace is safe.
    @Test
    public void test1412() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.4.2.5[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R25} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_dll); // {R12} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R14} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.4.2.5 trace is safe.
    @Test
    public void test1413() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.4.2.6[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R25} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_dll); // {R12} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R14} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.4.2.6 trace is safe.
    @Test
    public void test1414() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.4.2.7[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R25} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_dll); // {R12} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R14} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.4.2.7 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1415() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.4.2.8[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R25} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_dll); // {R12} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "previous")); // {R14} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.4.2.8 trace is safe.
    @Test
    public void test1416() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.4.3//.1[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R25} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "element")); // {R12} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R14} == Object[9] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.4.3//.1 trace is safe.
    @Test
    public void test1417() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.4.3.2[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R25} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "element")); // {R12} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R14} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.4.3.2 trace is safe.
    @Test
    public void test1418() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.4.3.3[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R25} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "element")); // {R12} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R14} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.4.3.3 trace is safe.
    @Test
    public void test1419() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.4.3.4[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R25} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "element")); // {R12} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R14} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.4.3.4 trace is safe.
    @Test
    public void test1420() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.4.3.5[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R25} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "element")); // {R12} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R14} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.4.3.5 trace is safe.
    @Test
    public void test1421() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.4.3.6[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R25} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "element")); // {R12} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R14} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.4.3.6 trace is safe.
    @Test
    public void test1422() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.4.3.7[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R25} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "element")); // {R12} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R14} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.4.3.7 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1423() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.4.3.8[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R25} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "element")); // {R12} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "previous")); // {R14} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.4.3.8 trace is safe.
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.5//.1 {ROOT}:dll.header.next.next.element not expanded. It may be a hint of too strong user-defined constraints, possibly correct when enforcing redundancy by representation invariant.
    @Test
    public void test1424() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.5//.1//.1[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R25} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_this); // {R16} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R18} == Object[9] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.5//.1//.1 trace is safe.
    @Test
    public void test1425() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.5//.1.2[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R25} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_this); // {R16} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R18} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.5//.1.2 trace is safe.
    @Test
    public void test1426() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.5//.1.3[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R25} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_this); // {R16} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R18} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.5//.1.3 trace is safe.
    @Test
    public void test1427() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.5//.1.4[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R25} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_this); // {R16} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R18} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.5//.1.4 trace is safe.
    @Test
    public void test1428() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.5//.1.5[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R25} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_this); // {R16} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R18} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.5//.1.5 trace is safe.
    @Test
    public void test1429() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.5//.1.6[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R25} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_this); // {R16} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R18} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.5//.1.6 trace is safe.
    @Test
    public void test1430() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.5//.1.7[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R25} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_this); // {R16} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R18} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.5//.1.7 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1431() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.5//.1.8[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R25} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_this); // {R16} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "previous")); // {R18} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.5//.1.8 trace is safe.
    @Test
    public void test1432() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.5.2//.1[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R25} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_dll); // {R16} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R18} == Object[9] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.5.2//.1 trace is safe.
    @Test
    public void test1433() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.5.2.2[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R25} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_dll); // {R16} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R18} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.5.2.2 trace is safe.
    @Test
    public void test1434() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.5.2.3[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R25} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_dll); // {R16} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R18} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.5.2.3 trace is safe.
    @Test
    public void test1435() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.5.2.4[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R25} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_dll); // {R16} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R18} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.5.2.4 trace is safe.
    @Test
    public void test1436() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.5.2.5[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R25} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_dll); // {R16} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R18} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.5.2.5 trace is safe.
    @Test
    public void test1437() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.5.2.6[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R25} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_dll); // {R16} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R18} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.5.2.6 trace is safe.
    @Test
    public void test1438() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.5.2.7[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R25} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_dll); // {R16} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R18} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.5.2.7 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1439() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.5.2.8[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R25} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_dll); // {R16} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "previous")); // {R18} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.5.2.8 trace is safe.
    @Test
    public void test1440() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.5.3//.1[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R25} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "element")); // {R16} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R18} == Object[9] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.5.3//.1 trace is safe.
    @Test
    public void test1441() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.5.3.2[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R25} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "element")); // {R16} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R18} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.5.3.2 trace is safe.
    @Test
    public void test1442() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.5.3.3[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R25} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "element")); // {R16} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R18} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.5.3.3 trace is safe.
    @Test
    public void test1443() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.5.3.4[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R25} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "element")); // {R16} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R18} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.5.3.4 trace is safe.
    @Test
    public void test1444() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.5.3.5[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R25} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "element")); // {R16} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R18} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.5.3.5 trace is safe.
    @Test
    public void test1445() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.5.3.6[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R25} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "element")); // {R16} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R18} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.5.3.6 trace is safe.
    @Test
    public void test1446() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.5.3.7[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R25} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "element")); // {R16} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R18} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.5.3.7 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1447() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.5.3.8[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R25} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "element")); // {R16} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "previous")); // {R18} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.5.3.8 trace is safe.
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.6//.1 {ROOT}:dll.header.next.next.next.element not expanded. It may be a hint of too strong user-defined constraints, possibly correct when enforcing redundancy by representation invariant.
    @Test
    public void test1448() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.6//.1//.1[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R25} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_this); // {R20} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R22} == Object[9] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.6//.1//.1 trace is safe.
    @Test
    public void test1449() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.6//.1.2[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R25} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_this); // {R20} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R22} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.6//.1.2 trace is safe.
    @Test
    public void test1450() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.6//.1.3[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R25} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_this); // {R20} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R22} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.6//.1.3 trace is safe.
    @Test
    public void test1451() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.6//.1.4[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R25} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_this); // {R20} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R22} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.6//.1.4 trace is safe.
    @Test
    public void test1452() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.6//.1.5[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R25} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_this); // {R20} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R22} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.6//.1.5 trace is safe.
    @Test
    public void test1453() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.6//.1.6[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R25} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_this); // {R20} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R22} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.6//.1.6 trace is safe.
    @Test
    public void test1454() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.6//.1.7[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R25} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_this); // {R20} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R22} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.6//.1.7 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1455() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.6//.1.8[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R25} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_this); // {R20} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue(), "previous")); // {R22} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.6//.1.8 trace is safe.
    @Test
    public void test1456() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.6.2//.1[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R25} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_dll); // {R20} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R22} == Object[9] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.6.2//.1 trace is safe.
    @Test
    public void test1457() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.6.2.2[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R25} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_dll); // {R20} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R22} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.6.2.2 trace is safe.
    @Test
    public void test1458() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.6.2.3[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R25} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_dll); // {R20} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R22} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.6.2.3 trace is safe.
    @Test
    public void test1459() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.6.2.4[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R25} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_dll); // {R20} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R22} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.6.2.4 trace is safe.
    @Test
    public void test1460() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.6.2.5[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R25} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_dll); // {R20} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R22} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.6.2.5 trace is safe.
    @Test
    public void test1461() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.6.2.6[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R25} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_dll); // {R20} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R22} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.6.2.6 trace is safe.
    @Test
    public void test1462() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.6.2.7[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R25} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_dll); // {R20} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R22} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.6.2.7 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1463() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.6.2.8[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R25} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_dll); // {R20} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue(), "previous")); // {R22} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.6.2.8 trace is safe.
    @Test
    public void test1464() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.6.3//.1[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R25} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue(), "element")); // {R20} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R22} == Object[9] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.6.3//.1 trace is safe.
    @Test
    public void test1465() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.6.3.2[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R25} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue(), "element")); // {R20} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R22} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.6.3.2 trace is safe.
    @Test
    public void test1466() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.6.3.3[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R25} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue(), "element")); // {R20} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R22} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.6.3.3 trace is safe.
    @Test
    public void test1467() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.6.3.4[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R25} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue(), "element")); // {R20} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R22} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.6.3.4 trace is safe.
    @Test
    public void test1468() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.6.3.5[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R25} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue(), "element")); // {R20} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R22} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.6.3.5 trace is safe.
    @Test
    public void test1469() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.6.3.6[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R25} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue(), "element")); // {R20} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R22} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.6.3.6 trace is safe.
    @Test
    public void test1470() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.6.3.7[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R25} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue(), "element")); // {R20} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R22} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.6.3.7 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1471() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.6.3.8[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R25} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue(), "element")); // {R20} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue(), "previous")); // {R22} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.6.3.8 trace is safe.
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.7//.1 {ROOT}:dll.header.next.next.next.next.element not expanded. It may be a hint of too strong user-defined constraints, possibly correct when enforcing redundancy by representation invariant.
    @Test
    public void test1472() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.7//.1//.1[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R25} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R24} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R26} == Object[9] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.7//.1//.1 trace is safe.
    @Test
    public void test1473() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.7//.1.2[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R25} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R24} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R26} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.7//.1.2 trace is safe.
    @Test
    public void test1474() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.7//.1.3[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R25} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R24} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R26} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.7//.1.3 trace is safe.
    @Test
    public void test1475() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.7//.1.4[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R25} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R24} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R26} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.7//.1.4 trace is safe.
    @Test
    public void test1476() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.7//.1.5[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R25} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R24} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R26} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.7//.1.5 trace is safe.
    @Test
    public void test1477() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.7//.1.6[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R25} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R24} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R26} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.7//.1.6 trace is safe.
    @Test
    public void test1478() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.7//.1.7[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R25} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R24} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R26} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.7//.1.7 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1479() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.7//.1.8[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R25} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("element", __ROOT_this); // {R24} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue(), "previous")); // {R26} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.7//.1.8 trace is safe.
    @Test
    public void test1480() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.7.2//.1[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R25} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R24} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R26} == Object[9] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.7.2//.1 trace is safe.
    @Test
    public void test1481() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.7.2.2[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R25} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R24} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R26} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.7.2.2 trace is safe.
    @Test
    public void test1482() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.7.2.3[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R25} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R24} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R26} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.7.2.3 trace is safe.
    @Test
    public void test1483() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.7.2.4[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R25} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R24} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R26} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.7.2.4 trace is safe.
    @Test
    public void test1484() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.7.2.5[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R25} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R24} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R26} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.7.2.5 trace is safe.
    @Test
    public void test1485() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.7.2.6[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R25} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R24} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R26} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.7.2.6 trace is safe.
    @Test
    public void test1486() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.7.2.7[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R25} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R24} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R26} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.7.2.7 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1487() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.7.2.8[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R25} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("element", __ROOT_dll); // {R24} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue(), "previous")); // {R26} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.7.2.8 trace is safe.
    @Test
    public void test1488() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.7.3//.1[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R25} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue(), "element")); // {R24} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R26} == Object[9] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.7.3//.1 trace is safe.
    @Test
    public void test1489() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.7.3.2[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R25} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue(), "element")); // {R24} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R26} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.7.3.2 trace is safe.
    @Test
    public void test1490() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.7.3.3[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R25} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue(), "element")); // {R24} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R26} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.7.3.3 trace is safe.
    @Test
    public void test1491() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.7.3.4[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R25} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue(), "element")); // {R24} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R26} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.7.3.4 trace is safe.
    @Test
    public void test1492() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.7.3.5[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R25} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue(), "element")); // {R24} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R26} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.7.3.5 trace is safe.
    @Test
    public void test1493() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.7.3.6[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R25} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue(), "element")); // {R24} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R26} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.7.3.6 trace is safe.
    @Test
    public void test1494() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.7.3.7[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R25} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue(), "element")); // {R24} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R26} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.7.3.7 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1495() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.7.3.8[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue()); // {R25} == Object[8] (aliases {ROOT}:dll.header.next.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue(), "element")); // {R24} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue(), "previous")); // {R26} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.7.3.8 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1496() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1//.1.8[14]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R21} == Object[8] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").set("next", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").get("next").getValue(), "next")); // {R25} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1//.1.8 trace is safe.
//.1//.1.3//.1//.1.2//.1//.1//.1.2//.1 {ROOT}:dll.header.next.element not expanded. It may be a hint of too strong user-defined constraints, possibly correct when enforcing redundancy by representation invariant.
    @Test
    public void test1497() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1.2//.1//.1[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R21} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_this); // {R12} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R14} == Object[8] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1.2//.1//.1 trace is safe.
    @Test
    public void test1498() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1.2//.1.2[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R21} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_this); // {R12} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R14} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1.2//.1.2 trace is safe.
    @Test
    public void test1499() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1.2//.1.3[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R21} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_this); // {R12} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R14} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1.2//.1.3 trace is safe.
    @Test
    public void test1500() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1.2//.1.4[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R21} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_this); // {R12} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R14} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1.2//.1.4 trace is safe.
    @Test
    public void test1501() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1.2//.1.5[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R21} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_this); // {R12} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R14} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1.2//.1.5 trace is safe.
    @Test
    public void test1502() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1.2//.1.6[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R21} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_this); // {R12} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R14} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1.2//.1.6 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1503() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1.2//.1.7[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R21} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_this); // {R12} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "previous")); // {R14} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1.2//.1.7 trace is safe.
    @Test
    public void test1504() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1.2.2//.1[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R21} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_dll); // {R12} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R14} == Object[8] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1.2.2//.1 trace is safe.
    @Test
    public void test1505() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1.2.2.2[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R21} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_dll); // {R12} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R14} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1.2.2.2 trace is safe.
    @Test
    public void test1506() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1.2.2.3[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R21} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_dll); // {R12} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R14} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1.2.2.3 trace is safe.
    @Test
    public void test1507() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1.2.2.4[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R21} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_dll); // {R12} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R14} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1.2.2.4 trace is safe.
    @Test
    public void test1508() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1.2.2.5[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R21} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_dll); // {R12} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R14} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1.2.2.5 trace is safe.
    @Test
    public void test1509() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1.2.2.6[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R21} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_dll); // {R12} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R14} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1.2.2.6 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1510() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1.2.2.7[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R21} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_dll); // {R12} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "previous")); // {R14} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1.2.2.7 trace is safe.
    @Test
    public void test1511() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1.2.3//.1[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R21} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "element")); // {R12} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R14} == Object[8] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1.2.3//.1 trace is safe.
    @Test
    public void test1512() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1.2.3.2[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R21} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "element")); // {R12} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R14} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1.2.3.2 trace is safe.
    @Test
    public void test1513() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1.2.3.3[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R21} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "element")); // {R12} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R14} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1.2.3.3 trace is safe.
    @Test
    public void test1514() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1.2.3.4[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R21} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "element")); // {R12} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R14} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1.2.3.4 trace is safe.
    @Test
    public void test1515() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1.2.3.5[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R21} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "element")); // {R12} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R14} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1.2.3.5 trace is safe.
    @Test
    public void test1516() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1.2.3.6[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R21} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "element")); // {R12} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R14} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1.2.3.6 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1517() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1.2.3.7[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R21} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "element")); // {R12} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "previous")); // {R14} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1.2.3.7 trace is safe.
    @Test
    public void test1518() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1.3[64]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R21} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1.3 trace is safe.
//.1//.1.3//.1//.1.2//.1//.1//.1.4//.1 {ROOT}:dll.header.next.next.element not expanded. It may be a hint of too strong user-defined constraints, possibly correct when enforcing redundancy by representation invariant.
    @Test
    public void test1519() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1.4//.1//.1[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R21} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_this); // {R16} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R18} == Object[8] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1.4//.1//.1 trace is safe.
    @Test
    public void test1520() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1.4//.1.2[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R21} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_this); // {R16} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R18} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1.4//.1.2 trace is safe.
    @Test
    public void test1521() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1.4//.1.3[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R21} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_this); // {R16} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R18} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1.4//.1.3 trace is safe.
    @Test
    public void test1522() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1.4//.1.4[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R21} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_this); // {R16} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R18} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1.4//.1.4 trace is safe.
    @Test
    public void test1523() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1.4//.1.5[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R21} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_this); // {R16} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R18} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1.4//.1.5 trace is safe.
    @Test
    public void test1524() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1.4//.1.6[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R21} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_this); // {R16} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R18} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1.4//.1.6 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1525() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1.4//.1.7[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R21} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_this); // {R16} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "previous")); // {R18} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1.4//.1.7 trace is safe.
    @Test
    public void test1526() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1.4.2//.1[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R21} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_dll); // {R16} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R18} == Object[8] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1.4.2//.1 trace is safe.
    @Test
    public void test1527() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1.4.2.2[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R21} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_dll); // {R16} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R18} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1.4.2.2 trace is safe.
    @Test
    public void test1528() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1.4.2.3[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R21} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_dll); // {R16} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R18} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1.4.2.3 trace is safe.
    @Test
    public void test1529() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1.4.2.4[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R21} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_dll); // {R16} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R18} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1.4.2.4 trace is safe.
    @Test
    public void test1530() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1.4.2.5[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R21} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_dll); // {R16} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R18} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1.4.2.5 trace is safe.
    @Test
    public void test1531() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1.4.2.6[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R21} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_dll); // {R16} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R18} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1.4.2.6 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1532() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1.4.2.7[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R21} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_dll); // {R16} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "previous")); // {R18} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1.4.2.7 trace is safe.
    @Test
    public void test1533() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1.4.3//.1[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R21} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "element")); // {R16} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R18} == Object[8] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1.4.3//.1 trace is safe.
    @Test
    public void test1534() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1.4.3.2[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R21} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "element")); // {R16} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R18} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1.4.3.2 trace is safe.
    @Test
    public void test1535() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1.4.3.3[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R21} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "element")); // {R16} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R18} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1.4.3.3 trace is safe.
    @Test
    public void test1536() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1.4.3.4[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R21} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "element")); // {R16} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R18} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1.4.3.4 trace is safe.
    @Test
    public void test1537() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1.4.3.5[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R21} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "element")); // {R16} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R18} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1.4.3.5 trace is safe.
    @Test
    public void test1538() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1.4.3.6[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R21} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "element")); // {R16} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R18} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1.4.3.6 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1539() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1.4.3.7[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R21} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "element")); // {R16} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "previous")); // {R18} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1.4.3.7 trace is safe.
//.1//.1.3//.1//.1.2//.1//.1//.1.5//.1 {ROOT}:dll.header.next.next.next.element not expanded. It may be a hint of too strong user-defined constraints, possibly correct when enforcing redundancy by representation invariant.
    @Test
    public void test1540() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1.5//.1//.1[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R21} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_this); // {R20} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R22} == Object[8] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1.5//.1//.1 trace is safe.
    @Test
    public void test1541() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1.5//.1.2[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R21} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_this); // {R20} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R22} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1.5//.1.2 trace is safe.
    @Test
    public void test1542() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1.5//.1.3[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R21} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_this); // {R20} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R22} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1.5//.1.3 trace is safe.
    @Test
    public void test1543() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1.5//.1.4[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R21} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_this); // {R20} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R22} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1.5//.1.4 trace is safe.
    @Test
    public void test1544() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1.5//.1.5[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R21} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_this); // {R20} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R22} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1.5//.1.5 trace is safe.
    @Test
    public void test1545() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1.5//.1.6[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R21} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_this); // {R20} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R22} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1.5//.1.6 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1546() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1.5//.1.7[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R21} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_this); // {R20} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue(), "previous")); // {R22} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1.5//.1.7 trace is safe.
    @Test
    public void test1547() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1.5.2//.1[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R21} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_dll); // {R20} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R22} == Object[8] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1.5.2//.1 trace is safe.
    @Test
    public void test1548() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1.5.2.2[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R21} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_dll); // {R20} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R22} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1.5.2.2 trace is safe.
    @Test
    public void test1549() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1.5.2.3[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R21} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_dll); // {R20} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R22} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1.5.2.3 trace is safe.
    @Test
    public void test1550() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1.5.2.4[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R21} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_dll); // {R20} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R22} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1.5.2.4 trace is safe.
    @Test
    public void test1551() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1.5.2.5[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R21} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_dll); // {R20} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R22} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1.5.2.5 trace is safe.
    @Test
    public void test1552() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1.5.2.6[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R21} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_dll); // {R20} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R22} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1.5.2.6 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1553() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1.5.2.7[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R21} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_dll); // {R20} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue(), "previous")); // {R22} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1.5.2.7 trace is safe.
    @Test
    public void test1554() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1.5.3//.1[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R21} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue(), "element")); // {R20} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R22} == Object[8] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1.5.3//.1 trace is safe.
    @Test
    public void test1555() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1.5.3.2[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R21} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue(), "element")); // {R20} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R22} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1.5.3.2 trace is safe.
    @Test
    public void test1556() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1.5.3.3[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R21} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue(), "element")); // {R20} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R22} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1.5.3.3 trace is safe.
    @Test
    public void test1557() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1.5.3.4[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R21} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue(), "element")); // {R20} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R22} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1.5.3.4 trace is safe.
    @Test
    public void test1558() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1.5.3.5[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R21} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue(), "element")); // {R20} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R22} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1.5.3.5 trace is safe.
    @Test
    public void test1559() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1.5.3.6[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R21} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue(), "element")); // {R20} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R22} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1.5.3.6 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1560() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1.5.3.7[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R21} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue(), "element")); // {R20} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue(), "previous")); // {R22} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1.5.3.7 trace is safe.
//.1//.1.3//.1//.1.2//.1//.1//.1.6//.1 {ROOT}:dll.header.next.next.next.element not expanded. It may be a hint of too strong user-defined constraints, possibly correct when enforcing redundancy by representation invariant.
    @Test
    public void test1561() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1.6//.1//.1[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R21} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_this); // {R20} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R22} == Object[8] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1.6//.1//.1 trace is safe.
    @Test
    public void test1562() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1.6//.1.2[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R21} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_this); // {R20} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R22} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1.6//.1.2 trace is safe.
    @Test
    public void test1563() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1.6//.1.3[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R21} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_this); // {R20} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R22} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1.6//.1.3 trace is safe.
    @Test
    public void test1564() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1.6//.1.4[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R21} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_this); // {R20} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R22} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1.6//.1.4 trace is safe.
    @Test
    public void test1565() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1.6//.1.5[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R21} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_this); // {R20} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R22} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1.6//.1.5 trace is safe.
    @Test
    public void test1566() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1.6//.1.6[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R21} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_this); // {R20} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R22} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1.6//.1.6 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1567() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1.6//.1.7[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R21} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_this); // {R20} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue(), "previous")); // {R22} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1.6//.1.7 trace is safe.
    @Test
    public void test1568() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1.6.2//.1[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R21} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_dll); // {R20} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R22} == Object[8] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1.6.2//.1 trace is safe.
    @Test
    public void test1569() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1.6.2.2[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R21} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_dll); // {R20} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R22} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1.6.2.2 trace is safe.
    @Test
    public void test1570() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1.6.2.3[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R21} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_dll); // {R20} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R22} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1.6.2.3 trace is safe.
    @Test
    public void test1571() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1.6.2.4[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R21} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_dll); // {R20} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R22} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1.6.2.4 trace is safe.
    @Test
    public void test1572() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1.6.2.5[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R21} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_dll); // {R20} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R22} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1.6.2.5 trace is safe.
    @Test
    public void test1573() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1.6.2.6[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R21} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_dll); // {R20} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R22} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1.6.2.6 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1574() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1.6.2.7[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R21} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", __ROOT_dll); // {R20} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue(), "previous")); // {R22} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1.6.2.7 trace is safe.
    @Test
    public void test1575() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1.6.3//.1[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R21} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue(), "element")); // {R20} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R22} == Object[8] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1.6.3//.1 trace is safe.
    @Test
    public void test1576() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1.6.3.2[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R21} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue(), "element")); // {R20} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R22} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1.6.3.2 trace is safe.
    @Test
    public void test1577() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1.6.3.3[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R21} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue(), "element")); // {R20} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R22} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1.6.3.3 trace is safe.
    @Test
    public void test1578() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1.6.3.4[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R21} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue(), "element")); // {R20} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R22} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1.6.3.4 trace is safe.
    @Test
    public void test1579() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1.6.3.5[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R21} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue(), "element")); // {R20} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R22} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1.6.3.5 trace is safe.
    @Test
    public void test1580() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1.6.3.6[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R21} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue(), "element")); // {R20} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R22} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1.6.3.6 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1581() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1.6.3.7[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue()); // {R21} == Object[7] (aliases {ROOT}:dll.header.next.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue(), "element")); // {R20} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue(), "previous")); // {R22} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1.6.3.7 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1582() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1//.1.7[7]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R17} == Object[7] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").set("next", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").get("next").getValue(), "next")); // {R21} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1//.1.7 trace is safe.
//.1//.1.3//.1//.1.2//.1//.1.2//.1 {ROOT}:dll.header.next.next.element not expanded. It may be a hint of too strong user-defined constraints, possibly correct when enforcing redundancy by representation invariant.
    @Test
    public void test1583() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1.2//.1//.1[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R17} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_this); // {R16} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R18} == Object[7] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1.2//.1//.1 trace is safe.
    @Test
    public void test1584() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1.2//.1.2[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R17} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_this); // {R16} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R18} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1.2//.1.2 trace is safe.
    @Test
    public void test1585() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1.2//.1.3[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R17} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_this); // {R16} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R18} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1.2//.1.3 trace is safe.
    @Test
    public void test1586() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1.2//.1.4[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R17} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_this); // {R16} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R18} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1.2//.1.4 trace is safe.
    @Test
    public void test1587() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1.2//.1.5[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R17} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_this); // {R16} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R18} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1.2//.1.5 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1588() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1.2//.1.6[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R17} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_this); // {R16} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "previous")); // {R18} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1.2//.1.6 trace is safe.
    @Test
    public void test1589() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1.2.2//.1[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R17} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_dll); // {R16} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R18} == Object[7] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1.2.2//.1 trace is safe.
    @Test
    public void test1590() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1.2.2.2[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R17} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_dll); // {R16} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R18} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1.2.2.2 trace is safe.
    @Test
    public void test1591() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1.2.2.3[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R17} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_dll); // {R16} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R18} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1.2.2.3 trace is safe.
    @Test
    public void test1592() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1.2.2.4[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R17} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_dll); // {R16} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R18} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1.2.2.4 trace is safe.
    @Test
    public void test1593() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1.2.2.5[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R17} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_dll); // {R16} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R18} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1.2.2.5 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1594() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1.2.2.6[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R17} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_dll); // {R16} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "previous")); // {R18} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1.2.2.6 trace is safe.
    @Test
    public void test1595() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1.2.3//.1[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R17} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "element")); // {R16} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R18} == Object[7] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1.2.3//.1 trace is safe.
    @Test
    public void test1596() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1.2.3.2[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R17} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "element")); // {R16} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R18} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1.2.3.2 trace is safe.
    @Test
    public void test1597() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1.2.3.3[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R17} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "element")); // {R16} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R18} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1.2.3.3 trace is safe.
    @Test
    public void test1598() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1.2.3.4[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R17} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "element")); // {R16} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R18} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1.2.3.4 trace is safe.
    @Test
    public void test1599() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1.2.3.5[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R17} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "element")); // {R16} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R18} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1.2.3.5 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1600() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1.2.3.6[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R17} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "element")); // {R16} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "previous")); // {R18} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1.2.3.6 trace is safe.
    @Test(expected=java.util.NoSuchElementException.class)
    public void test1601() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1.3[66]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R17} == Object[4] (aliases {ROOT}:dll.header.previous)
        ; // pre_init(java/util/NoSuchElementException)
        ; // pre_init(java/lang/RuntimeException)
        ; // pre_init(java/lang/Exception)
        ; // pre_init(java/lang/Throwable)
        ; // !pre_init(java/lang/String)
        ; // !pre_init(java/lang/String$CaseInsensitiveComparator)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1.3 trace is safe.
//.1//.1.3//.1//.1.2//.1//.1.4//.1 {ROOT}:dll.header.next.element not expanded. It may be a hint of too strong user-defined constraints, possibly correct when enforcing redundancy by representation invariant.
    @Test
    public void test1602() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1.4//.1//.1[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R17} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_this); // {R12} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R14} == Object[7] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1.4//.1//.1 trace is safe.
    @Test
    public void test1603() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1.4//.1.2[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R17} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_this); // {R12} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R14} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1.4//.1.2 trace is safe.
    @Test
    public void test1604() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1.4//.1.3[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R17} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_this); // {R12} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R14} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1.4//.1.3 trace is safe.
    @Test
    public void test1605() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1.4//.1.4[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R17} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_this); // {R12} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R14} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1.4//.1.4 trace is safe.
    @Test
    public void test1606() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1.4//.1.5[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R17} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_this); // {R12} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R14} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1.4//.1.5 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1607() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1.4//.1.6[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R17} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_this); // {R12} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "previous")); // {R14} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1.4//.1.6 trace is safe.
    @Test
    public void test1608() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1.4.2//.1[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R17} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_dll); // {R12} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R14} == Object[7] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1.4.2//.1 trace is safe.
    @Test
    public void test1609() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1.4.2.2[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R17} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_dll); // {R12} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R14} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1.4.2.2 trace is safe.
    @Test
    public void test1610() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1.4.2.3[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R17} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_dll); // {R12} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R14} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1.4.2.3 trace is safe.
    @Test
    public void test1611() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1.4.2.4[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R17} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_dll); // {R12} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R14} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1.4.2.4 trace is safe.
    @Test
    public void test1612() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1.4.2.5[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R17} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_dll); // {R12} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R14} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1.4.2.5 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1613() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1.4.2.6[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R17} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_dll); // {R12} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "previous")); // {R14} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1.4.2.6 trace is safe.
    @Test
    public void test1614() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1.4.3//.1[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R17} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "element")); // {R12} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R14} == Object[7] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1.4.3//.1 trace is safe.
    @Test
    public void test1615() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1.4.3.2[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R17} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "element")); // {R12} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R14} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1.4.3.2 trace is safe.
    @Test
    public void test1616() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1.4.3.3[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R17} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "element")); // {R12} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R14} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1.4.3.3 trace is safe.
    @Test
    public void test1617() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1.4.3.4[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R17} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "element")); // {R12} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R14} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1.4.3.4 trace is safe.
    @Test
    public void test1618() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1.4.3.5[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R17} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "element")); // {R12} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R14} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1.4.3.5 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1619() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1.4.3.6[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R17} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "element")); // {R12} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "previous")); // {R14} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1.4.3.6 trace is safe.
//.1//.1.3//.1//.1.2//.1//.1.5//.1 {ROOT}:dll.header.next.next.element not expanded. It may be a hint of too strong user-defined constraints, possibly correct when enforcing redundancy by representation invariant.
    @Test
    public void test1620() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1.5//.1//.1[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R17} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_this); // {R16} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R18} == Object[7] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1.5//.1//.1 trace is safe.
    @Test
    public void test1621() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1.5//.1.2[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R17} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_this); // {R16} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R18} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1.5//.1.2 trace is safe.
    @Test
    public void test1622() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1.5//.1.3[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R17} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_this); // {R16} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R18} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1.5//.1.3 trace is safe.
    @Test
    public void test1623() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1.5//.1.4[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R17} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_this); // {R16} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R18} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1.5//.1.4 trace is safe.
    @Test
    public void test1624() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1.5//.1.5[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R17} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_this); // {R16} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R18} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1.5//.1.5 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1625() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1.5//.1.6[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R17} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_this); // {R16} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "previous")); // {R18} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1.5//.1.6 trace is safe.
    @Test
    public void test1626() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1.5.2//.1[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R17} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_dll); // {R16} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R18} == Object[7] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1.5.2//.1 trace is safe.
    @Test
    public void test1627() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1.5.2.2[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R17} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_dll); // {R16} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R18} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1.5.2.2 trace is safe.
    @Test
    public void test1628() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1.5.2.3[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R17} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_dll); // {R16} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R18} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1.5.2.3 trace is safe.
    @Test
    public void test1629() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1.5.2.4[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R17} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_dll); // {R16} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R18} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1.5.2.4 trace is safe.
    @Test
    public void test1630() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1.5.2.5[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R17} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_dll); // {R16} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R18} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1.5.2.5 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1631() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1.5.2.6[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R17} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", __ROOT_dll); // {R16} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "previous")); // {R18} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1.5.2.6 trace is safe.
    @Test
    public void test1632() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1.5.3//.1[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R17} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "element")); // {R16} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R18} == Object[7] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1.5.3//.1 trace is safe.
    @Test
    public void test1633() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1.5.3.2[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R17} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "element")); // {R16} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R18} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1.5.3.2 trace is safe.
    @Test
    public void test1634() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1.5.3.3[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R17} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "element")); // {R16} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R18} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1.5.3.3 trace is safe.
    @Test
    public void test1635() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1.5.3.4[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R17} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "element")); // {R16} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R18} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1.5.3.4 trace is safe.
    @Test
    public void test1636() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1.5.3.5[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R17} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "element")); // {R16} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R18} == Object[6] (aliases {ROOT}:dll.header.next.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1.5.3.5 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1637() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1.5.3.6[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue()); // {R17} == Object[6] (aliases {ROOT}:dll.header.next.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "element")); // {R16} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "previous")); // {R18} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1.5.3.6 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1638() {
        //test case for state //.1//.1.3//.1//.1.2//.1//.1.6[7]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", newInstance("common.LinkedList$Entry")); // {R13} == Object[6] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").set("next", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").get("next").getValue(), "next")); // {R17} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1//.1.6 trace is safe.
//.1//.1.3//.1//.1.2//.1.2//.1 {ROOT}:dll.header.next.element not expanded. It may be a hint of too strong user-defined constraints, possibly correct when enforcing redundancy by representation invariant.
    @Test
    public void test1639() {
        //test case for state //.1//.1.3//.1//.1.2//.1.2//.1//.1[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R13} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_this); // {R12} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R14} == Object[6] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1.2//.1//.1 trace is safe.
    @Test
    public void test1640() {
        //test case for state //.1//.1.3//.1//.1.2//.1.2//.1.2[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R13} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_this); // {R12} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R14} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1.2//.1.2 trace is safe.
    @Test
    public void test1641() {
        //test case for state //.1//.1.3//.1//.1.2//.1.2//.1.3[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R13} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_this); // {R12} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R14} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1.2//.1.3 trace is safe.
    @Test
    public void test1642() {
        //test case for state //.1//.1.3//.1//.1.2//.1.2//.1.4[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R13} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_this); // {R12} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R14} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1.2//.1.4 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1643() {
        //test case for state //.1//.1.3//.1//.1.2//.1.2//.1.5[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R13} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_this); // {R12} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "previous")); // {R14} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1.2//.1.5 trace is safe.
    @Test
    public void test1644() {
        //test case for state //.1//.1.3//.1//.1.2//.1.2.2//.1[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R13} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_dll); // {R12} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R14} == Object[6] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1.2.2//.1 trace is safe.
    @Test
    public void test1645() {
        //test case for state //.1//.1.3//.1//.1.2//.1.2.2.2[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R13} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_dll); // {R12} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R14} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1.2.2.2 trace is safe.
    @Test
    public void test1646() {
        //test case for state //.1//.1.3//.1//.1.2//.1.2.2.3[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R13} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_dll); // {R12} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R14} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1.2.2.3 trace is safe.
    @Test
    public void test1647() {
        //test case for state //.1//.1.3//.1//.1.2//.1.2.2.4[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R13} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_dll); // {R12} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R14} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1.2.2.4 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1648() {
        //test case for state //.1//.1.3//.1//.1.2//.1.2.2.5[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R13} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_dll); // {R12} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "previous")); // {R14} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1.2.2.5 trace is safe.
    @Test
    public void test1649() {
        //test case for state //.1//.1.3//.1//.1.2//.1.2.3//.1[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R13} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "element")); // {R12} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R14} == Object[6] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1.2.3//.1 trace is safe.
    @Test
    public void test1650() {
        //test case for state //.1//.1.3//.1//.1.2//.1.2.3.2[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R13} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "element")); // {R12} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R14} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1.2.3.2 trace is safe.
    @Test
    public void test1651() {
        //test case for state //.1//.1.3//.1//.1.2//.1.2.3.3[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R13} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "element")); // {R12} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R14} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1.2.3.3 trace is safe.
    @Test
    public void test1652() {
        //test case for state //.1//.1.3//.1//.1.2//.1.2.3.4[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R13} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "element")); // {R12} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R14} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1.2.3.4 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1653() {
        //test case for state //.1//.1.3//.1//.1.2//.1.2.3.5[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R13} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "element")); // {R12} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "previous")); // {R14} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1.2.3.5 trace is safe.
//.1//.1.3//.1//.1.2//.1.3//.1 {ROOT}:dll.header.next.element not expanded. It may be a hint of too strong user-defined constraints, possibly correct when enforcing redundancy by representation invariant.
    @Test
    public void test1654() {
        //test case for state //.1//.1.3//.1//.1.2//.1.3//.1//.1[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R13} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_this); // {R12} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R14} == Object[6] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1.3//.1//.1 trace is safe.
    @Test
    public void test1655() {
        //test case for state //.1//.1.3//.1//.1.2//.1.3//.1.2[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R13} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_this); // {R12} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R14} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1.3//.1.2 trace is safe.
    @Test
    public void test1656() {
        //test case for state //.1//.1.3//.1//.1.2//.1.3//.1.3[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R13} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_this); // {R12} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R14} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1.3//.1.3 trace is safe.
    @Test
    public void test1657() {
        //test case for state //.1//.1.3//.1//.1.2//.1.3//.1.4[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R13} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_this); // {R12} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R14} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1.3//.1.4 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1658() {
        //test case for state //.1//.1.3//.1//.1.2//.1.3//.1.5[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R13} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_this); // {R12} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "previous")); // {R14} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1.3//.1.5 trace is safe.
    @Test
    public void test1659() {
        //test case for state //.1//.1.3//.1//.1.2//.1.3.2//.1[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R13} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_dll); // {R12} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R14} == Object[6] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1.3.2//.1 trace is safe.
    @Test
    public void test1660() {
        //test case for state //.1//.1.3//.1//.1.2//.1.3.2.2[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R13} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_dll); // {R12} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R14} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1.3.2.2 trace is safe.
    @Test
    public void test1661() {
        //test case for state //.1//.1.3//.1//.1.2//.1.3.2.3[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R13} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_dll); // {R12} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R14} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1.3.2.3 trace is safe.
    @Test
    public void test1662() {
        //test case for state //.1//.1.3//.1//.1.2//.1.3.2.4[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R13} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_dll); // {R12} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R14} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1.3.2.4 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1663() {
        //test case for state //.1//.1.3//.1//.1.2//.1.3.2.5[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R13} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_dll); // {R12} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "previous")); // {R14} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1.3.2.5 trace is safe.
    @Test
    public void test1664() {
        //test case for state //.1//.1.3//.1//.1.2//.1.3.3//.1[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R13} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "element")); // {R12} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R14} == Object[6] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1.3.3//.1 trace is safe.
    @Test
    public void test1665() {
        //test case for state //.1//.1.3//.1//.1.2//.1.3.3.2[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R13} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "element")); // {R12} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R14} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1.3.3.2 trace is safe.
    @Test
    public void test1666() {
        //test case for state //.1//.1.3//.1//.1.2//.1.3.3.3[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R13} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "element")); // {R12} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R14} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1.3.3.3 trace is safe.
    @Test
    public void test1667() {
        //test case for state //.1//.1.3//.1//.1.2//.1.3.3.4[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R13} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "element")); // {R12} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R14} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1.3.3.4 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1668() {
        //test case for state //.1//.1.3//.1//.1.2//.1.3.3.5[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R13} == Object[4] (aliases {ROOT}:dll.header.previous)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "element")); // {R12} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "previous")); // {R14} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1.3.3.5 trace is safe.
//.1//.1.3//.1//.1.2//.1.4//.1 {ROOT}:dll.header.next.element not expanded. It may be a hint of too strong user-defined constraints, possibly correct when enforcing redundancy by representation invariant.
    @Test
    public void test1669() {
        //test case for state //.1//.1.3//.1//.1.2//.1.4//.1//.1[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R13} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_this); // {R12} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R14} == Object[6] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1.4//.1//.1 trace is safe.
    @Test
    public void test1670() {
        //test case for state //.1//.1.3//.1//.1.2//.1.4//.1.2[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R13} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_this); // {R12} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R14} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1.4//.1.2 trace is safe.
    @Test
    public void test1671() {
        //test case for state //.1//.1.3//.1//.1.2//.1.4//.1.3[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R13} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_this); // {R12} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R14} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1.4//.1.3 trace is safe.
    @Test
    public void test1672() {
        //test case for state //.1//.1.3//.1//.1.2//.1.4//.1.4[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R13} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_this); // {R12} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R14} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1.4//.1.4 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1673() {
        //test case for state //.1//.1.3//.1//.1.2//.1.4//.1.5[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R13} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_this); // {R12} == Object[0] (aliases {ROOT}:this)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "previous")); // {R14} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1.4//.1.5 trace is safe.
    @Test
    public void test1674() {
        //test case for state //.1//.1.3//.1//.1.2//.1.4.2//.1[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R13} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_dll); // {R12} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R14} == Object[6] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1.4.2//.1 trace is safe.
    @Test
    public void test1675() {
        //test case for state //.1//.1.3//.1//.1.2//.1.4.2.2[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R13} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_dll); // {R12} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R14} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1.4.2.2 trace is safe.
    @Test
    public void test1676() {
        //test case for state //.1//.1.3//.1//.1.2//.1.4.2.3[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R13} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_dll); // {R12} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R14} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1.4.2.3 trace is safe.
    @Test
    public void test1677() {
        //test case for state //.1//.1.3//.1//.1.2//.1.4.2.4[37]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R13} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_dll); // {R12} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R14} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1.4.2.4 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1678() {
        //test case for state //.1//.1.3//.1//.1.2//.1.4.2.5[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R13} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", __ROOT_dll); // {R12} == Object[1] (aliases {ROOT}:dll)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "previous")); // {R14} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1.4.2.5 trace is safe.
    @Test
    public void test1679() {
        //test case for state //.1//.1.3//.1//.1.2//.1.4.3//.1[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R13} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "element")); // {R12} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", newInstance("common.LinkedList$Entry")); // {R14} == Object[6] (fresh)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1.4.3//.1 trace is safe.
    @Test
    public void test1680() {
        //test case for state //.1//.1.3//.1//.1.2//.1.4.3.2[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R13} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "element")); // {R12} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R14} == Object[2] (aliases {ROOT}:dll.header)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1.4.3.2 trace is safe.
    @Test
    public void test1681() {
        //test case for state //.1//.1.3//.1//.1.2//.1.4.3.3[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R13} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "element")); // {R12} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R14} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1.4.3.3 trace is safe.
    @Test
    public void test1682() {
        //test case for state //.1//.1.3//.1//.1.2//.1.4.3.4[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R13} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "element")); // {R12} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R14} == Object[5] (aliases {ROOT}:dll.header.next)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1.4.3.4 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1683() {
        //test case for state //.1//.1.3//.1//.1.2//.1.4.3.5[3]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", new AccessibleObject(__ROOT_dll).get("header").get("next").getValue()); // {R13} == Object[5] (aliases {ROOT}:dll.header.next)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("element", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "element")); // {R12} == null
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "previous")); // {R14} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1.4.3.5 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1684() {
        //test case for state //.1//.1.3//.1//.1.2//.1.5[7]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", newInstance("common.LinkedList$Entry")); // {R5} == Object[5] (fresh)
        new AccessibleObject(__ROOT_dll).get("header").get("next").set("next", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").get("next").getValue(), "next")); // {R13} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2//.1.5 trace is safe.
    @Test(expected=java.util.NoSuchElementException.class)
    public void test1685() {
        //test case for state //.1//.1.3//.1//.1.2.2[80]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R5} == Object[2] (aliases {ROOT}:dll.header)
        ; // pre_init(java/util/NoSuchElementException)
        ; // pre_init(java/lang/RuntimeException)
        ; // pre_init(java/lang/Exception)
        ; // pre_init(java/lang/Throwable)
        ; // !pre_init(java/lang/String)
        ; // !pre_init(java/lang/String$CaseInsensitiveComparator)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2.2 trace is safe.
    @Test
    public void test1686() {
        //test case for state //.1//.1.3//.1//.1.2.3[85]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", new AccessibleObject(__ROOT_dll).get("header").get("previous").getValue()); // {R5} == Object[4] (aliases {ROOT}:dll.header.previous)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2.3 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1687() {
        //test case for state //.1//.1.3//.1//.1.2.4[7]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", newInstance("common.LinkedList$Entry")); // {R6} == Object[4] (fresh)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        new AccessibleObject(__ROOT_dll).get("header").set("next", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").getValue(), "next")); // {R5} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1//.1.2.4 trace is safe.
    @Test(expected=java.lang.IndexOutOfBoundsException.class)
    public void test1688() {
        //test case for state //.1//.1.3//.1.2//.1[40]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R6} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).set("size", 0);  // 4 >= {V3} + 1
        ; // pre_init(java/lang/IndexOutOfBoundsException)
        ; // pre_init(java/lang/RuntimeException)
        ; // pre_init(java/lang/Exception)
        ; // pre_init(java/lang/Throwable)
        ; // !pre_init(java/lang/String)
        ; // !pre_init(java/lang/String$CaseInsensitiveComparator)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1.2//.1 trace is safe.
    @Test
    public void test1689() {
        //test case for state //.1//.1.3//.1.2.2[96]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", new AccessibleObject(__ROOT_dll).get("header").getValue()); // {R6} == Object[2] (aliases {ROOT}:dll.header)
        new AccessibleObject(__ROOT_dll).set("size", 4);  // 4 < {V3} + 1
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1.2.2 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1690() {
        //test case for state //.1//.1.3//.1.3[23]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", newInstance("common.LinkedList$Entry")); // {R3} == Object[2] (fresh)
        ; // pre_init(common/LinkedList$Entry)
        new AccessibleObject(__ROOT_dll).get("header").set("previous", null);this.nullObjectFields.add(new ObjectField(new AccessibleObject(__ROOT_dll).get("header").getValue(), "previous")); // {R6} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3//.1.3 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1691() {
        //test case for state //.1//.1.3.2[7]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = (common.LinkedList) newInstance("common.LinkedList"); // {R1} == Object[1] (fresh)
        java.lang.Object __ROOT_o = null; // {R2} == null
        new AccessibleObject(__ROOT_dll).set("header", null);this.nullObjectFields.add(new ObjectField(__ROOT_dll, "header")); // {R3} == null
        ; // pre_init(common/LinkedList$Entry)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1//.1.3.2 trace is safe.
//.1.2//.1 {ROOT}:o not expanded. It may be a hint of too strong user-defined constraints, possibly correct when enforcing redundancy by representation invariant.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1692() {
        //test case for state //.1.2//.1[1]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = null; // {R1} == null
        dll_hard.Main __ROOT_o = __ROOT_this; // {R2} == Object[0] (aliases {ROOT}:this)
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1.2//.1 trace is safe.
    @Test(expected=java.lang.NullPointerException.class)
    public void test1693() {
        //test case for state //.1.2.2[1]
        this.nullObjectFields = new HashSet<>();
        dll_hard.Main __ROOT_this = (dll_hard.Main) newInstance("dll_hard.Main"); // {R0} == Object[0] (fresh)
        ; // pre_init(dll_hard/Main)
        ; // !pre_init(java/lang/Object)
        common.LinkedList __ROOT_dll = null; // {R1} == null
        java.lang.Object __ROOT_o = null; // {R2} == null
        if (__ROOT_dll.repOK()) System.out.println("true"); // __ROOT_this.sample(__ROOT_dll, __ROOT_o);
    }
//.1.2.2 trace is safe.
}
